rm(list=ls())
# load package
require(NAM)
#library(dplyr)
# import files for processing. Phenotype and Genotypes have been filtered after imputation of genotypes.
# only samples with phenotypic and genotypic data are included. SNPs in LD >0.8 have been removed, and genotypes are
# coded based on Rasmusson allele.
# Data set was generated using Step1_Prep_Imp_GxE.R
# import phenotypes
#y <- read.csv("~/Dropbox/SmithLab/NAM/Analysis/WholeNAM_80mis_6060ind/Imputed_Output/Filtered_maf_mis_LD/GWAS/forGWAS/LDKNNI/Input/phenos_LDKNNI.csv", header=T)
y <- read.csv("/home/smithkp/agonzale/Projects/NAM/Analysis/GWAS_bootstrap/Data/phenos_LDKNNI.csv", header=T)
# import genotypes
#gen_noLD <- read.csv("~/Dropbox/SmithLab/NAM/Analysis/WholeNAM_80mis_6060ind/Imputed_Output/Filtered_maf_mis_LD/GWAS/forGWAS/LDKNNI/Input/genos_LDKNNI.csv", header = T)
gen_noRas <- read.csv("/home/smithkp/agonzale/Projects/NAM/Analysis/GWAS_bootstrap/Data/genos_LDKNNI.csv", header = T)
#LD <- read.table("~/Documents/PhD/NAM/NAM_mapping/Genotypes/List_SNPtoKeep_noLD80.txt")
rm(list=ls())
# load package
require(NAM)
#library(dplyr)
# import files for processing. Phenotype and Genotypes have been filtered after imputation of genotypes.
# only samples with phenotypic and genotypic data are included. SNPs in LD >0.8 have been removed, and genotypes are
# coded based on Rasmusson allele.
# Data set was generated using Step1_Prep_Imp_GxE.R
# import phenotypes
y <- read.csv("~/Dropbox/SmithLab/NAM/Analysis/WholeNAM_80mis_6060ind/Imputed_Output/Filtered_maf_mis_LD/GWAS/forGWAS/LDKNNI/Input/phenos_LDKNNI.csv", header=T)
#y <- read.csv("/home/smithkp/agonzale/Projects/NAM/Analysis/GWAS_bootstrap/Data/phenos_LDKNNI.csv", header=T)
# import genotypes
gen_noRas <- read.csv("~/Dropbox/SmithLab/NAM/Analysis/WholeNAM_80mis_6060ind/Imputed_Output/Filtered_maf_mis_LD/GWAS/forGWAS/LDKNNI/Input/genos_LDKNNI.csv", header = T)
#gen_noRas <- read.csv("/home/smithkp/agonzale/Projects/NAM/Analysis/GWAS_bootstrap/Data/genos_LDKNNI.csv", header = T)
#LD <- read.table("~/Documents/PhD/NAM/NAM_mapping/Genotypes/List_SNPtoKeep_noLD80.txt")
# See what I'm working with
class(y)
class(gen_noRas)
dim(y)
dim(gen_noRas)
# Filter for rows present in both genotypes and phenotypes
gen_1 <- gen_noRas[match(y$line_name, gen_noRas$X, nomatch = NA, incomparables = F),]
# Remove rows where all genos are NA in phenos
gen_2 <- gen_1[rowSums(is.na(gen_1)) != ncol(gen_1),]
# filter for rows present in both in phenos
y_1 <- y[match(gen_2$X, y$line_name, nomatch = NA, incomparables = F),]
y_2 <- y_1[rowSums(is.na(y_1)) != ncol(y_1),]
# View(gen_2)
# View(y_2)
# Remove line names
gen_naked <- gen_2[,-c(1)]
# Marker QC + imputation
adjusted_genotypes = snpQC( gen=gen_naked, MAF=0.05, impute=FALSE)
rownames(adjusted_genotypes) = y_2$line_name
dim(adjusted_genotypes)
# 8,021 markers
# getting chr
chr = data.frame(table(gsub("._.+$", "",colnames(adjusted_genotypes))))[,2]
class(chr)
SAMPLE_NAMES<-y_2[,2]
############
# Import list of families
Families<-read.table("~/GITHUB/BRIDG6/Datasets/Intermidiate_dataset/Pop_structure_propDiss_JULY2016_parentLessMissingData_grep.txt",header=T)
#Count how many individuals per family we have
Count_ind_fam<-matrix(NA,ncol=2,nrow=dim(Families)[1])
for(x in 1:dim(Families)[1]){
Fam<-grep(Families[x,"Family_grep"],SAMPLE_NAMES)
Count_ind_fam[x,1]<-as.character(Families[x,"Family_grep"])
Count_ind_fam[x,2]<-length(Fam)
}
Count_ind_fam<-as.data.frame(Count_ind_fam)
# separate the families by those that have more than 25 individuals and those with less than 25 individuals
# if the family has <25 individuals, all the individuals in the family will be used every time
FamLess25<-Count_ind_fam[which(as.numeric(as.character(Count_ind_fam[,2])) <= 25),]
FamMore25<-Count_ind_fam[which(as.numeric(as.character(Count_ind_fam[,2])) > 25),]
Families<-read.table("~/Dropbox/GITHUB/BRIDG6/Datasets/Intermidiate_dataset/Pop_structure_propDiss_JULY2016_parentLessMissingData_grep.txt",header=T)
#Count how many individuals per family we have
Count_ind_fam<-matrix(NA,ncol=2,nrow=dim(Families)[1])
for(x in 1:dim(Families)[1]){
Fam<-grep(Families[x,"Family_grep"],SAMPLE_NAMES)
Count_ind_fam[x,1]<-as.character(Families[x,"Family_grep"])
Count_ind_fam[x,2]<-length(Fam)
}
Count_ind_fam<-as.data.frame(Count_ind_fam)
# separate the families by those that have more than 25 individuals and those with less than 25 individuals
# if the family has <25 individuals, all the individuals in the family will be used every time
FamLess25<-Count_ind_fam[which(as.numeric(as.character(Count_ind_fam[,2])) <= 25),]
FamMore25<-Count_ind_fam[which(as.numeric(as.character(Count_ind_fam[,2])) > 25),]
RESULTS_SIGNIF<-NULL
SNPs_significant<-NULL
##### for bootstrapping even number of individuals per family
TotalNumber<-c(264,528,968,2012)
t<-1
TOTALrandomSamples<- TotalNumber[t]
SUB_Sampling<-data.frame(c(264,528,968,2024),c(3,6,11,23))
colnames(SUB_Sampling)<-c("TotalSize","IndPerFam")
SUB_Sampling<-data.frame(c(264,528,968,2024),c(3,6,11,23))
colnames(SUB_Sampling)<-c("TotalSize","IndPerFam")
i<-1
SUB_Sampling
SamplesTotal<-NULL
TOTALrandomSamples <=968
for (h in 1:dim(Families)[1]){
Fam_all<-SAMPLE_NAMES[grep(Families[h,"Family_grep"],SAMPLE_NAMES)]
#select subsamples per family
Subsample <- Fam_all[ sample(1:length(Fam_all), SUB_Sampling[which(SUB_Sampling[,1] ==TOTALrandomSamples ),2] , replace = F)]
SamplesTotal<-c(SamplesTotal,as.character(Subsample))
}
dim(SamplesTotal)
length(SamplesTotal)
head(Subsample)
RESULTS_SIGNIF<-NULL
SNPs_significant<-NULL
##### for bootstrapping even number of individuals per family
TotalNumber<-c(264,528,968,2024)
TOTALrandomSamples<- TotalNumber[t]
a<-i
#select subsamples regardless of family
SamplesTotal <- SAMPLE_NAMES[ sample(1:length(SAMPLE_NAMES), TOTALrandomSamples, replace = F)]
head(SamplesTotal)
length(SamplesTotal)
Physical_positions <-  apply(SamplesTotal,1, function(x) strsplit(as.character(x), "S")[[1]][1])
SamplesTotal<-as.data.frame(SamplesTotal)
Physical_positions <-  apply(SamplesTotal,1, function(x) strsplit(as.character(x), "S")[[1]][1])
head(Physical_positions)
table(Physical_positions)
Families_represented <-  apply(SamplesTotal,1, function(x) strsplit(as.character(x), "S")[[1]][1])
length(unique(Families_represented))
23*88
