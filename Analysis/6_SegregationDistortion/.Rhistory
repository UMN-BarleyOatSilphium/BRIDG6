start<-1
for (s in 1: length(EndPosition)){
#print (s)
start<-start
end<-EndPosition[s]
SEGMENT<-CHR_X[start:end,]
#MEAN<-as.data.frame(t(apply(SEGMENT, 2, summary)[4,]))
MEAN<-as.data.frame(t(apply(SEGMENT , 2, GetMean)))
#row.names(MEAN)<-paste(CHRnames[n], "_", s, sep="")
row.names(MEAN)<-paste(CHRnames[n], "_", str_pad(s, 4, pad = "0"), sep="")
# add values to our Results table
#if (s==1){RESULTS_mean[s,]<-MEAN}else{RESULTS_mean<-rbind(RESULTS_mean, (MEAN))}
RESULTS_mean<-rbind(RESULTS_mean, (MEAN))
start<-(end+1)
}
RESULTS_mean[1:5,1:5]
RESULTS_mean<-matrix(NA, ncol=dim(DATA)[2])
colnames(RESULTS_mean)<-colnames(DATA)
CHRnames<-c("CHR1", "CHR2", "CHR3", "CHR4", "CHR5", "CHR6", "CHR7") # ignore the UNknown chrosmosome since we cannot group it by physical proximity
GetMean<-function(dat){
if (length(which(is.na(dat))) == length(dat)){mean_value<-NA}
mean_value<-mean(dat[which(!is.na(dat))])
return(mean_value)
}
for (n in 1:length(CHRnames)){
print (n)
# Devide each chromosome in 200 parts and get the average frequency of donor allele for that segment
CHR_X<-get(CHRnames[n])
# number of SNPs per segment to get 200 segments
SNPsPerSegment<-round(dim(CHR_X)[1]/200, digits=0)
# Total posible segments
dim(CHR_X)[1]/SNPsPerSegment
TotalSegments<-round(dim(CHR_X)[1]/SNPsPerSegment)
EndPosition<-seq(TotalSegments , dim(CHR_X)[1], by= SNPsPerSegment)
# if the last position is less than the SNPsperSegment from the end of the chromosome, change the position to be the end of the chromosome
if ((dim(CHR_X)[1]  - EndPosition[length(EndPosition)]) <SNPsPerSegment) {EndPosition[length(EndPosition)]<-(dim(CHR_X)[1])}
start<-1
for (s in 1: length(EndPosition)){
#print (s)
start<-start
end<-EndPosition[s]
SEGMENT<-CHR_X[start:end,]
#MEAN<-as.data.frame(t(apply(SEGMENT, 2, summary)[4,]))
MEAN<-as.data.frame(t(apply(SEGMENT , 2, GetMean)))
#row.names(MEAN)<-paste(CHRnames[n], "_", s, sep="")
row.names(MEAN)<-paste(CHRnames[n], "_", str_pad(s, 4, pad = "0"), sep="")
# add values to our Results table
#if (s==1){RESULTS_mean[s,]<-MEAN}else{RESULTS_mean<-rbind(RESULTS_mean, (MEAN))}
RESULTS_mean<-rbind(RESULTS_mean, (MEAN))
start<-(end+1)
}
}
row.names(RESULTS_mean)[1]<-"CHR1_0001"
RESULTS_mean[1:5,1:5]
RESULTS_mean<-RESULTS_mean[-1,]
write.table(RESULTS_mean, "~/Documents/SmithLab/NAM/Analysis/SNPdensity_and_segDist/SegDist_091817/Output/88Fam_genmap_segDist_binned.txt", quote=F,row.names=T,col.names=T,sep="\t")
rm(list=ls())
library(ggplot2)
library(dplyr)
library(reshape2)
Seg_dist <- read.table("/Users/agonzale/Documents/SmithLab/NAM/Analysis/SNPdensity_and_segDist/SegDist_091817/Output/88Fam_genmap_segDist_binned.txt", header = T)
Seg_dist[1:5,1:5]
rm(list=ls())
library (gtools)
FAMILY<-read.table("~/Dropbox/SmithLab/NAM/Analysis/HAPMAP_sharedSNP_nuc/Pri_hmp_Ras_gbsExome/50missing/List_Fam_afterQC.txt")
df<-1
AAexp<-0.5
BBexp<-0.5
COUNT_genotypeAA<-function(dat){
AAgenotype<-length(which(dat == "AA"))
if (AAgenotype  == 0 ){freq <- 0}
if (AAgenotype >0){freq <- AAgenotype/(length(which(!is.na(dat) & dat !="AB")))}
return(freq)
}
genotypeAAcount<-function(dat){
genotypeAA<-length(grep("AA",(dat)))
return(genotypeAA)
}
genotypeABcount<-function(dat){
genotypeAB<-length(grep("AB",(dat)))
return(genotypeAB)
}
CHIsq<-function(dat){
a<-as.numeric(as.character(dat[2]))
b<-as.numeric(as.character(dat[3]))
total<-a+b
#expected counts
ExpectedAA<-total*AAexp
ExpectedBB<-total*BBexp
SumChiSq<-((a - ExpectedAA)^2/ExpectedAA) + ((b - ExpectedBB)^2/ExpectedBB)
p_value<-pchisq(SumChiSq,1, lower.tail=F)
return(p_value)
}
i<-5
HAPMAP<-read.table(paste("~/Dropbox/SmithLab/NAM/Analysis/HAPMAP_sharedSNP_nuc/Pri_hmp_Ras_gbsExome/50missing/HAPMAP_forNA_DCO_QC_uniqInd_rmCloseSNP2/", 	FAMILY[i,1], "_Hapmap_NA_DCO_QC_unique_rmCloseSNP2.txt", sep=""), header=T,row.names=1)
RIL<-HAPMAP[,-c(1,2)]
FREQUENCY<-(as.data.frame(apply(RIL,1, COUNT_genotypeAA)))
dim()
dim(FREQUENCY)
FREQUENCY[1:5]
FREQUENCY[1:5,1]
table(RIL[,1])
RIL[1:4,1:4]
1289/(1289+150+986)
1289/(1289+986)
COUNT_genotypeAA
COUNT_genotypeAA
AAgenotype
1289 /(1289+  986)
FREQUENCY[1,1]
table(RIL[1,])
table(as.numeric(as.matrix(RIL[1,])))
table(as.numeric(as.character(RIL[1,])))
table(as.matrix(RIL[1,]))
23/(23+20)
FREQ<-cbind(row.names(RIL), FREQUENCY)
colnames(FREQ)<-c("SNP", as.character(FAMILY[i,1]))
genotype_counts<-matrix(0,ncol=3, nrow=dim(RIL)[1])
colnames(genotype_counts)<-c("SNP","genotypeAA","genotypeBB")
genotype_counts[,1]<-row.names(RIL)
genotype_counts[,2]<-apply(RIL,1,genotypeAAcount)
genotype_counts[,3]<-apply(RIL,1,genotypeBBcount)
CHIsq
genotypeBBcount<-function(dat){
genotypeBB<-length(grep("BB",(dat)))
return(genotypeBB)
}
genotype_counts[,3]<-apply(RIL,1,genotypeBBcount)
head(genotype_counts)
genotype_counts_pvalue<-cbind(FREQ,genotype_counts,as.data.frame(P_value_out))
P_value_out<-apply(genotype_counts,1,CHIsq)
genotype_counts_pvalue<-cbind(FREQ,genotype_counts,as.data.frame(P_value_out))
head(genotype_counts_pvalue)
genotype_counts_pvalue$Index<-c(1:dim(genotype_counts_pvalue)[1])
head(FREQ)
head(FREQ_pvalue)
FREQ_pvalue<-FREQ
FREQ_pvalue[,2]<-P_value_out
colnames(FREQ_pvalue)<-c("SNP", as.character(FAMILY[i,1]))
head(FREQ_pvalue)
0.5348837-1
head(FREQ)
FREQ_pvalue<-FREQ
head(FREQ_pvalue)
FREQ_pvalue[,2]<-P_value_out
head(FREQ_pvalue)
FREQ_pvalue<-FREQ
FREQ_pvalue[,3]<-P_value_out
head(FREQ_pvalue)
head(P_value_out)
head(genotype_counts)
CHIsq
colnames(FREQ_pvalue)<-c("SNP", as.character(FAMILY[i,1]))
FREQ_pvalue<-as.data.frame(FREQ_pvalue)
head(FREQ_pvalue)
assign(paste("AA_FREQ_",i, sep=""), FREQ)
assign(paste("AA_pval_",i, sep=""), P_value_out)
head(FREQ)
i
head(P_value_out)
head(genotype_counts)
# Author: Ana M Poets
# Description: Calculate Excess contribution of donor parent at each family using X2. Expectation 1:1 ratio Donor:Common parent genotype frequency at F5. Df = 2 -1 = 1 (two classes allowed AA and BB)
# Estimate p-values
################################################################################################################################################
rm(list=ls())
library (gtools)
FAMILY<-read.table("~/Dropbox/SmithLab/NAM/Analysis/HAPMAP_sharedSNP_nuc/Pri_hmp_Ras_gbsExome/50missing/List_Fam_afterQC.txt")
# Paramenters to calculate p-values for segregation distortion
df<-1
# Expected Ratios
AAexp<-0.5
BBexp<-0.5
# Function to calculate frequency of "AA" genotype (Rasmusson)
COUNT_genotypeAA<-function(dat){
AAgenotype<-length(which(dat == "AA"))
if (AAgenotype  == 0 ){freq <- 0}
if (AAgenotype >0){freq <- AAgenotype/(length(which(!is.na(dat) & dat !="AB")))}
return(freq)
}
# Functions to count the number of times that genotypes AA and BB are observed per marker
genotypeAAcount<-function(dat){
genotypeAA<-length(grep("AA",(dat)))
return(genotypeAA)
}
genotypeBBcount<-function(dat){
genotypeBB<-length(grep("BB",(dat)))
return(genotypeBB)
}
######## count hetes
genotypeABcount<-function(dat){
genotypeAB<-length(grep("AB",(dat)))
return(genotypeAB)
}
#calculate p-value
CHIsq<-function(dat){
a<-as.numeric(as.character(dat[2]))
b<-as.numeric(as.character(dat[3]))
total<-a+b
#expected counts
ExpectedAA<-total*AAexp
ExpectedBB<-total*BBexp
SumChiSq<-((a - ExpectedAA)^2/ExpectedAA) + ((b - ExpectedBB)^2/ExpectedBB)
p_value<-pchisq(SumChiSq,1, lower.tail=F)
return(p_value)
}
# Get a the hapmap used to generate the genetic maps.
for (i in 1:(dim(FAMILY)[1])){
HAPMAP<-read.table(paste("~/Dropbox/SmithLab/NAM/Analysis/HAPMAP_sharedSNP_nuc/Pri_hmp_Ras_gbsExome/50missing/HAPMAP_forNA_DCO_QC_uniqInd_rmCloseSNP2/", 	FAMILY[i,1], "_Hapmap_NA_DCO_QC_unique_rmCloseSNP2.txt", sep=""), header=T,row.names=1)
# Follow the frequency of genotype BB (donor parent). Since this hapmap has been conditionated in having both parents present and segregating, we don't have to follow parent AA
# Remove parents from the file
RIL<-HAPMAP[,-c(1,2)]
# Per family estimating genotype frequency at each marker
FREQUENCY<-(as.data.frame(apply(RIL,1, COUNT_genotypeAA)))
FREQ<-cbind(row.names(RIL), FREQUENCY)
colnames(FREQ)<-c("SNP", as.character(FAMILY[i,1]))
# Empty matrix to retrieve the count of genotype A and B
genotype_counts<-matrix(0,ncol=3, nrow=dim(RIL)[1])
colnames(genotype_counts)<-c("SNP","genotypeAA","genotypeBB")
genotype_counts[,1]<-row.names(RIL)
genotype_counts[,2]<-apply(RIL,1,genotypeAAcount)
genotype_counts[,3]<-apply(RIL,1,genotypeBBcount)
# Estimate Pvalues for expected 1:1 ratio of genotypes
P_value_out<-apply(genotype_counts,1,CHIsq)
genotype_counts_pvalue<-cbind(FREQ,genotype_counts,as.data.frame(P_value_out))
genotype_counts_pvalue$Index<-c(1:dim(genotype_counts_pvalue)[1])
# Set output to export p-values for each family at each marker
FREQ_pvalue<-FREQ
FREQ_pvalue[,3]<-P_value_out
colnames(FREQ_pvalue)<-c("SNP", as.character(FAMILY[i,1]))
FREQ_pvalue<-as.data.frame(FREQ_pvalue)
assign(paste("AA_FREQ_",i, sep=""), FREQ)
assign(paste("AA_pval_",i, sep=""), P_value_out)
# Plot Parents contribution Distortion at each family and the significant distorted markers
pdf(paste("~/Documents/SmithLab/NAM/Analysis/SNPdensity_and_segDist/SegDist_091817/Plots/",FAMILY[i,1],"_ContribDist_pval.pdf",sep=""), width=7, height=5)
plot(genotype_counts_pvalue$Index,genotype_counts_pvalue[,as.character(FAMILY[i,1])], ylab="Frequency Donor genotype",xlab="SNP sorted",cex=0.4, main=as.character(FAMILY[i,1]))
points(genotype_counts_pvalue[which(genotype_counts_pvalue$P_value_out <0.05),"Index"], genotype_counts_pvalue[which(genotype_counts_pvalue$P_value_out <0.05),as.character(FAMILY[i,1])], col="red",cex=0.4)
abline(v=c(grep("2H",row.names(genotype_counts_pvalue))[1],grep("3H",row.names(genotype_counts_pvalue))[1], grep("4H",row.names(genotype_counts_pvalue))[1],grep("5H",row.names(genotype_counts_pvalue))[1],grep("6H",row.names(genotype_counts_pvalue))[1],grep("7H",row.names(genotype_counts_pvalue))[1]), lty=2,col="green")
legend("topleft",col=c("Black","Red","GREEN"), pch=c(1,1,NA),lty=c(NA,NA,2),legend=c("SNP non-sig","SNP sig (plval<0.05)","Chromosome boundaries"),cex=0.6)
dev.off()
}
####### Combine the results for all families for Segregation distortion
# Make a vector comma separated with all the BB_FREQ_ variables, then to make a table of significant SNPs at each family
LIST_VECTORS<-list(NULL)
Variables_pos<-(grep("AA_FREQ_",ls()))
for (v in 1:length(Variables_pos)){
POS<-as.numeric(Variables_pos[v])
LIST_VECTORS[[v]] <-get(ls()[POS])
}
# The example in stackoverflow is: Reduce(function(x, y) merge(x, y, all=TRUE), list(df1, df2, df3))
MY_TABLE<-Reduce(function(x, y) merge(x, y, all=TRUE), LIST_VECTORS)
# Sort markers alphanumerically
SNP_or_MY_TABLE<-mixedsort(as.character(MY_TABLE[,1]))
MY_TABLE_or<-MY_TABLE[match(SNP_or_MY_TABLE, MY_TABLE[,1]),]
write.table(MY_TABLE_or, "~/Documents/SmithLab/NAM/Analysis/SNPdensity_and_segDist/SegDist_091817/Output/88Fam_genmap_SNPdonorgenotypeFreqAA.txt", quote=F,row.names=F,col.names=T,sep="\t")
#################
####### Combine the results for all families for pvalue
# Make a vector comma separated with all the BB_FREQ_ variables, then to make a table of significant SNPs at each family
LIST_VECTORS_pvalue<-list(NULL)
Variables_pos<-(grep("AA_pval_",ls()))
for (v in 1:length(Variables_pos)){
POS<-as.numeric(Variables_pos[v])
LIST_VECTORS_pvalue[[v]] <-get(ls()[POS])
}
# The example in stackoverflow is: Reduce(function(x, y) merge(x, y, all=TRUE), list(df1, df2, df3))
MY_TABLE_pvalue<-Reduce(function(x, y) merge(x, y, all=TRUE), LIST_VECTORS_pvalue)
# Sort markers alphanumerically
SNP_or_MY_TABLE_pvalue<-mixedsort(as.character(MY_TABLE_pvalue[,1]))
MY_TABLE_or_pvalue<-MY_TABLE_pvalue[match(SNP_or_MY_TABLE_pvalue, MY_TABLE_pvalue[,1]),]
write.table(MY_TABLE_or_pvalue, "~/Documents/SmithLab/NAM/Analysis/SNPdensity_and_segDist/SegDist_091817/Output/88Fam_genmap_SNPdonorgenotypeFreq_pval.txt", quote=F,row.names=F,col.names=T,sep="\t")
#############
# Plot some of the families
if (identical(as.character(MY_TABLE_or[,1]), as.character(MY_TABLE_or_pvalue[,1]))==FALSE)stop("SNPs in Frequency and P-value tables are in different order")
MY_TABLE_or_indexed<-cbind(c(1:dim(MY_TABLE_or)[1]),MY_TABLE_or)
MY_TABLE_or_pvalue_indexed<-cbind(c(1:dim(MY_TABLE_or_pvalue)[1]),MY_TABLE_or_pvalue)
names(MY_TABLE_or_indexed)[1]<-"INDEX"
names(MY_TABLE_or_pvalue_indexed)[1]<-"INDEX"
l<-3
plot(MY_TABLE_or_indexed[,"INDEX"],MY_TABLE_or_indexed[,l])
points(MY_TABLE_or_indexed[which(MY_TABLE_or_pvalue_indexed[,l] <0.05),"INDEX"],MY_TABLE_or_indexed[which(MY_TABLE_or_pvalue_indexed[,l] <0.05),l],col="red")
for (i in 1:(dim(FAMILY)[1])){
HAPMAP<-read.table(paste("~/Dropbox/SmithLab/NAM/Analysis/HAPMAP_sharedSNP_nuc/Pri_hmp_Ras_gbsExome/50missing/HAPMAP_forNA_DCO_QC_uniqInd_rmCloseSNP2/", 	FAMILY[i,1], "_Hapmap_NA_DCO_QC_unique_rmCloseSNP2.txt", sep=""), header=T,row.names=1)
# Follow the frequency of genotype BB (donor parent). Since this hapmap has been conditionated in having both parents present and segregating, we don't have to follow parent AA
# Remove parents from the file
RIL<-HAPMAP[,-c(1,2)]
# Per family estimating genotype frequency at each marker
FREQUENCY<-(as.data.frame(apply(RIL,1, COUNT_genotypeAA)))
FREQ<-cbind(row.names(RIL), FREQUENCY)
colnames(FREQ)<-c("SNP", as.character(FAMILY[i,1]))
# Empty matrix to retrieve the count of genotype A and B
genotype_counts<-matrix(0,ncol=3, nrow=dim(RIL)[1])
colnames(genotype_counts)<-c("SNP","genotypeAA","genotypeBB")
genotype_counts[,1]<-row.names(RIL)
genotype_counts[,2]<-apply(RIL,1,genotypeAAcount)
genotype_counts[,3]<-apply(RIL,1,genotypeBBcount)
# Estimate Pvalues for expected 1:1 ratio of genotypes
P_value_out<-apply(genotype_counts,1,CHIsq)
genotype_counts_pvalue<-cbind(FREQ,genotype_counts,as.data.frame(P_value_out))
genotype_counts_pvalue$Index<-c(1:dim(genotype_counts_pvalue)[1])
# Set output to export p-values for each family at each marker
FREQ_pvalue<-FREQ
FREQ_pvalue[,3]<-P_value_out
colnames(FREQ_pvalue)<-c("SNP", as.character(FAMILY[i,1]))
FREQ_pvalue<-as.data.frame(FREQ_pvalue)
assign(paste("AA_FREQ_",i, sep=""), FREQ)
assign(paste("AA_pval_",i, sep=""), P_value_out)
# Plot Parents contribution Distortion at each family and the significant distorted markers
pdf(paste("~/Documents/SmithLab/NAM/Analysis/SNPdensity_and_segDist/SegDist_091817/Plots/",FAMILY[i,1],"_ContribDist_pval.pdf",sep=""), width=7, height=5)
plot(genotype_counts_pvalue$Index,genotype_counts_pvalue[,as.character(FAMILY[i,1])], ylab="Frequency Donor genotype",xlab="SNP sorted",cex=0.4, main=as.character(FAMILY[i,1]))
points(genotype_counts_pvalue[which(genotype_counts_pvalue$P_value_out <0.05),"Index"], genotype_counts_pvalue[which(genotype_counts_pvalue$P_value_out <0.05),as.character(FAMILY[i,1])], col="red",cex=0.4)
abline(v=c(grep("2H",row.names(genotype_counts_pvalue))[1],grep("3H",row.names(genotype_counts_pvalue))[1], grep("4H",row.names(genotype_counts_pvalue))[1],grep("5H",row.names(genotype_counts_pvalue))[1],grep("6H",row.names(genotype_counts_pvalue))[1],grep("7H",row.names(genotype_counts_pvalue))[1]), lty=2,col="green")
legend("topleft",col=c("Black","Red","GREEN"), pch=c(1,1,NA),lty=c(NA,NA,2),legend=c("SNP non-sig","SNP sig (plval<0.05)","Chromosome boundaries"),cex=0.6)
dev.off()
}
ls()
dim(AA_FREQ_61)
head(AA_FREQ_61)
head(FREQ)
i
head(AA_FREQ_88)
assign(paste("AA_FREQ_",i, sep=""), FREQ[,2])
head(AA_FREQ_88)
for (i in 1:(dim(FAMILY)[1])){
HAPMAP<-read.table(paste("~/Dropbox/SmithLab/NAM/Analysis/HAPMAP_sharedSNP_nuc/Pri_hmp_Ras_gbsExome/50missing/HAPMAP_forNA_DCO_QC_uniqInd_rmCloseSNP2/", 	FAMILY[i,1], "_Hapmap_NA_DCO_QC_unique_rmCloseSNP2.txt", sep=""), header=T,row.names=1)
# Follow the frequency of genotype BB (donor parent). Since this hapmap has been conditionated in having both parents present and segregating, we don't have to follow parent AA
# Remove parents from the file
RIL<-HAPMAP[,-c(1,2)]
# Per family estimating genotype frequency at each marker
FREQUENCY<-(as.data.frame(apply(RIL,1, COUNT_genotypeAA)))
FREQ<-cbind(row.names(RIL), FREQUENCY)
colnames(FREQ)<-c("SNP", as.character(FAMILY[i,1]))
# Empty matrix to retrieve the count of genotype A and B
genotype_counts<-matrix(0,ncol=3, nrow=dim(RIL)[1])
colnames(genotype_counts)<-c("SNP","genotypeAA","genotypeBB")
genotype_counts[,1]<-row.names(RIL)
genotype_counts[,2]<-apply(RIL,1,genotypeAAcount)
genotype_counts[,3]<-apply(RIL,1,genotypeBBcount)
# Estimate Pvalues for expected 1:1 ratio of genotypes
P_value_out<-apply(genotype_counts,1,CHIsq)
genotype_counts_pvalue<-cbind(FREQ,genotype_counts,as.data.frame(P_value_out))
genotype_counts_pvalue$Index<-c(1:dim(genotype_counts_pvalue)[1])
# Set output to export p-values for each family at each marker
FREQ_pvalue<-FREQ
FREQ_pvalue[,3]<-P_value_out
colnames(FREQ_pvalue)<-c("SNP", as.character(FAMILY[i,1]))
FREQ_pvalue<-as.data.frame(FREQ_pvalue)
assign(paste("AA_FREQ_",i, sep=""), FREQ[,2])
assign(paste("AA_pval_",i, sep=""), P_value_out[,2])
# Plot Parents contribution Distortion at each family and the significant distorted markers
pdf(paste("~/Documents/SmithLab/NAM/Analysis/SNPdensity_and_segDist/SegDist_091817/Plots/",FAMILY[i,1],"_ContribDist_pval.pdf",sep=""), width=7, height=5)
plot(genotype_counts_pvalue$Index,genotype_counts_pvalue[,as.character(FAMILY[i,1])], ylab="Frequency Donor genotype",xlab="SNP sorted",cex=0.4, main=as.character(FAMILY[i,1]))
points(genotype_counts_pvalue[which(genotype_counts_pvalue$P_value_out <0.05),"Index"], genotype_counts_pvalue[which(genotype_counts_pvalue$P_value_out <0.05),as.character(FAMILY[i,1])], col="red",cex=0.4)
abline(v=c(grep("2H",row.names(genotype_counts_pvalue))[1],grep("3H",row.names(genotype_counts_pvalue))[1], grep("4H",row.names(genotype_counts_pvalue))[1],grep("5H",row.names(genotype_counts_pvalue))[1],grep("6H",row.names(genotype_counts_pvalue))[1],grep("7H",row.names(genotype_counts_pvalue))[1]), lty=2,col="green")
legend("topleft",col=c("Black","Red","GREEN"), pch=c(1,1,NA),lty=c(NA,NA,2),legend=c("SNP non-sig","SNP sig (plval<0.05)","Chromosome boundaries"),cex=0.6)
dev.off()
}
head(P_value_out)
for (i in 1:(dim(FAMILY)[1])){
HAPMAP<-read.table(paste("~/Dropbox/SmithLab/NAM/Analysis/HAPMAP_sharedSNP_nuc/Pri_hmp_Ras_gbsExome/50missing/HAPMAP_forNA_DCO_QC_uniqInd_rmCloseSNP2/", 	FAMILY[i,1], "_Hapmap_NA_DCO_QC_unique_rmCloseSNP2.txt", sep=""), header=T,row.names=1)
# Follow the frequency of genotype BB (donor parent). Since this hapmap has been conditionated in having both parents present and segregating, we don't have to follow parent AA
# Remove parents from the file
RIL<-HAPMAP[,-c(1,2)]
# Per family estimating genotype frequency at each marker
FREQUENCY<-(as.data.frame(apply(RIL,1, COUNT_genotypeAA)))
FREQ<-cbind(row.names(RIL), FREQUENCY)
colnames(FREQ)<-c("SNP", as.character(FAMILY[i,1]))
# Empty matrix to retrieve the count of genotype A and B
genotype_counts<-matrix(0,ncol=3, nrow=dim(RIL)[1])
colnames(genotype_counts)<-c("SNP","genotypeAA","genotypeBB")
genotype_counts[,1]<-row.names(RIL)
genotype_counts[,2]<-apply(RIL,1,genotypeAAcount)
genotype_counts[,3]<-apply(RIL,1,genotypeBBcount)
# Estimate Pvalues for expected 1:1 ratio of genotypes
P_value_out<-apply(genotype_counts,1,CHIsq)
genotype_counts_pvalue<-cbind(FREQ,genotype_counts,as.data.frame(P_value_out))
genotype_counts_pvalue$Index<-c(1:dim(genotype_counts_pvalue)[1])
# Set output to export p-values for each family at each marker
FREQ_pvalue<-FREQ
FREQ_pvalue[,3]<-P_value_out
colnames(FREQ_pvalue)<-c("SNP", as.character(FAMILY[i,1]))
FREQ_pvalue<-as.data.frame(FREQ_pvalue)
assign(paste("AA_FREQ_",i, sep=""), FREQ[,2])
assign(paste("AA_pval_",i, sep=""), P_value_out)
# Plot Parents contribution Distortion at each family and the significant distorted markers
pdf(paste("~/Documents/SmithLab/NAM/Analysis/SNPdensity_and_segDist/SegDist_091817/Plots/",FAMILY[i,1],"_ContribDist_pval.pdf",sep=""), width=7, height=5)
plot(genotype_counts_pvalue$Index,genotype_counts_pvalue[,as.character(FAMILY[i,1])], ylab="Frequency Donor genotype",xlab="SNP sorted",cex=0.4, main=as.character(FAMILY[i,1]))
points(genotype_counts_pvalue[which(genotype_counts_pvalue$P_value_out <0.05),"Index"], genotype_counts_pvalue[which(genotype_counts_pvalue$P_value_out <0.05),as.character(FAMILY[i,1])], col="red",cex=0.4)
abline(v=c(grep("2H",row.names(genotype_counts_pvalue))[1],grep("3H",row.names(genotype_counts_pvalue))[1], grep("4H",row.names(genotype_counts_pvalue))[1],grep("5H",row.names(genotype_counts_pvalue))[1],grep("6H",row.names(genotype_counts_pvalue))[1],grep("7H",row.names(genotype_counts_pvalue))[1]), lty=2,col="green")
legend("topleft",col=c("Black","Red","GREEN"), pch=c(1,1,NA),lty=c(NA,NA,2),legend=c("SNP non-sig","SNP sig (plval<0.05)","Chromosome boundaries"),cex=0.6)
dev.off()
}
LIST_VECTORS<-list(NULL)
Variables_pos<-(grep("AA_FREQ_",ls()))
for (v in 1:length(Variables_pos)){
POS<-as.numeric(Variables_pos[v])
LIST_VECTORS[[v]] <-get(ls()[POS])
}
MY_TABLE<-Reduce(function(x, y) merge(x, y, all=TRUE), LIST_VECTORS)
rm(list=ls())
library (gtools)
FAMILY<-read.table("~/Dropbox/SmithLab/NAM/Analysis/HAPMAP_sharedSNP_nuc/Pri_hmp_Ras_gbsExome/50missing/List_Fam_afterQC.txt")
# Paramenters to calculate p-values for segregation distortion
df<-1
# Expected Ratios
AAexp<-0.5
BBexp<-0.5
# Function to calculate frequency of "AA" genotype (Rasmusson)
COUNT_genotypeAA<-function(dat){
AAgenotype<-length(which(dat == "AA"))
if (AAgenotype  == 0 ){freq <- 0}
if (AAgenotype >0){freq <- AAgenotype/(length(which(!is.na(dat) & dat !="AB")))}
return(freq)
}
# Functions to count the number of times that genotypes AA and BB are observed per marker
genotypeAAcount<-function(dat){
genotypeAA<-length(grep("AA",(dat)))
return(genotypeAA)
}
genotypeBBcount<-function(dat){
genotypeBB<-length(grep("BB",(dat)))
return(genotypeBB)
}
######## count hetes
genotypeABcount<-function(dat){
genotypeAB<-length(grep("AB",(dat)))
return(genotypeAB)
}
#calculate p-value
CHIsq<-function(dat){
a<-as.numeric(as.character(dat[2]))
b<-as.numeric(as.character(dat[3]))
total<-a+b
#expected counts
ExpectedAA<-total*AAexp
ExpectedBB<-total*BBexp
SumChiSq<-((a - ExpectedAA)^2/ExpectedAA) + ((b - ExpectedBB)^2/ExpectedBB)
p_value<-pchisq(SumChiSq,1, lower.tail=F)
return(p_value)
}
i<-5
HAPMAP<-read.table(paste("~/Dropbox/SmithLab/NAM/Analysis/HAPMAP_sharedSNP_nuc/Pri_hmp_Ras_gbsExome/50missing/HAPMAP_forNA_DCO_QC_uniqInd_rmCloseSNP2/", 	FAMILY[i,1], "_Hapmap_NA_DCO_QC_unique_rmCloseSNP2.txt", sep=""), header=T,row.names=1)
# Follow the frequency of genotype BB (donor parent). Since this hapmap has been conditionated in having both parents present and segregating, we don't have to follow parent AA
# Remove parents from the file
RIL<-HAPMAP[,-c(1,2)]
# Per family estimating genotype frequency at each marker
FREQUENCY<-(as.data.frame(apply(RIL,1, COUNT_genotypeAA)))
FREQ<-cbind(row.names(RIL), FREQUENCY)
colnames(FREQ)<-c("SNP", as.character(FAMILY[i,1]))
# Empty matrix to retrieve the count of genotype A and B
genotype_counts<-matrix(0,ncol=3, nrow=dim(RIL)[1])
colnames(genotype_counts)<-c("SNP","genotypeAA","genotypeBB")
genotype_counts[,1]<-row.names(RIL)
genotype_counts[,2]<-apply(RIL,1,genotypeAAcount)
genotype_counts[,3]<-apply(RIL,1,genotypeBBcount)
# Estimate Pvalues for expected 1:1 ratio of genotypes
P_value_out<-apply(genotype_counts,1,CHIsq)
genotype_counts_pvalue<-cbind(FREQ,genotype_counts,as.data.frame(P_value_out))
genotype_counts_pvalue$Index<-c(1:dim(genotype_counts_pvalue)[1])
# Set output to export p-values for each family at each marker
FREQ_pvalue<-FREQ
FREQ_pvalue[,3]<-P_value_out
colnames(FREQ_pvalue)<-c("SNP", as.character(FAMILY[i,1]))
FREQ_pvalue<-as.data.frame(FREQ_pvalue)
assign(paste("AA_FREQ_",i, sep=""), FREQ[,2])
assign(paste("AA_pval_",i, sep=""), FREQ_pvalue)
head(FREQ_pvalue)
head(P_value_out)
head(FREQ)
for (i in 1:3){
HAPMAP<-read.table(paste("~/Dropbox/SmithLab/NAM/Analysis/HAPMAP_sharedSNP_nuc/Pri_hmp_Ras_gbsExome/50missing/HAPMAP_forNA_DCO_QC_uniqInd_rmCloseSNP2/", 	FAMILY[i,1], "_Hapmap_NA_DCO_QC_unique_rmCloseSNP2.txt", sep=""), header=T,row.names=1)
# Follow the frequency of genotype BB (donor parent). Since this hapmap has been conditionated in having both parents present and segregating, we don't have to follow parent AA
# Remove parents from the file
RIL<-HAPMAP[,-c(1,2)]
# Per family estimating genotype frequency at each marker
FREQUENCY<-(as.data.frame(apply(RIL,1, COUNT_genotypeAA)))
FREQ<-cbind(row.names(RIL), FREQUENCY)
colnames(FREQ)<-c("SNP", as.character(FAMILY[i,1]))
# Empty matrix to retrieve the count of genotype A and B
genotype_counts<-matrix(0,ncol=3, nrow=dim(RIL)[1])
colnames(genotype_counts)<-c("SNP","genotypeAA","genotypeBB")
genotype_counts[,1]<-row.names(RIL)
genotype_counts[,2]<-apply(RIL,1,genotypeAAcount)
genotype_counts[,3]<-apply(RIL,1,genotypeBBcount)
# Estimate Pvalues for expected 1:1 ratio of genotypes
P_value_out<-apply(genotype_counts,1,CHIsq)
genotype_counts_pvalue<-cbind(FREQ,genotype_counts,as.data.frame(P_value_out))
genotype_counts_pvalue$Index<-c(1:dim(genotype_counts_pvalue)[1])
# Set output to export p-values for each family at each marker
FREQ_pvalue<-FREQ
FREQ_pvalue[,3]<-P_value_out
colnames(FREQ_pvalue)<-c("SNP", as.character(FAMILY[i,1]))
FREQ_pvalue<-as.data.frame(FREQ_pvalue)
assign(paste("AA_FREQ_",i, sep=""), FREQ[,2])
assign(paste("AA_pval_",i, sep=""), P_value_out)
# Plot Parents contribution Distortion at each family and the significant distorted markers
pdf(paste("~/Documents/SmithLab/NAM/Analysis/SNPdensity_and_segDist/SegDist_091817/Plots/",FAMILY[i,1],"_ContribDist_pval.pdf",sep=""), width=7, height=5)
plot(genotype_counts_pvalue$Index,genotype_counts_pvalue[,as.character(FAMILY[i,1])], ylab="Frequency Donor genotype",xlab="SNP sorted",cex=0.4, main=as.character(FAMILY[i,1]))
points(genotype_counts_pvalue[which(genotype_counts_pvalue$P_value_out <0.05),"Index"], genotype_counts_pvalue[which(genotype_counts_pvalue$P_value_out <0.05),as.character(FAMILY[i,1])], col="red",cex=0.4)
abline(v=c(grep("2H",row.names(genotype_counts_pvalue))[1],grep("3H",row.names(genotype_counts_pvalue))[1], grep("4H",row.names(genotype_counts_pvalue))[1],grep("5H",row.names(genotype_counts_pvalue))[1],grep("6H",row.names(genotype_counts_pvalue))[1],grep("7H",row.names(genotype_counts_pvalue))[1]), lty=2,col="green")
legend("topleft",col=c("Black","Red","GREEN"), pch=c(1,1,NA),lty=c(NA,NA,2),legend=c("SNP non-sig","SNP sig (plval<0.05)","Chromosome boundaries"),cex=0.6)
dev.off()
}
ls()
head(AA_FREQ_2)
head(AA_pval_2)
LIST_VECTORS<-list(NULL)
Variables_pos<-(grep("AA_FREQ_",ls()))
for (v in 1:length(Variables_pos)){
POS<-as.numeric(Variables_pos[v])
LIST_VECTORS[[v]] <-get(ls()[POS])
}
MY_TABLE<-Reduce(function(x, y) merge(x, y, all=TRUE), LIST_VECTORS)
