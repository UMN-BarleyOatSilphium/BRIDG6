names(Results_complete)[1]<-"Cumulative_bp"
write.table(Results_complete, "~/Desktop/80miss_byfam_SNP_info.csv",quote=F,row.names=T,col.names=T,sep="\t")
SNP_info_complete <- read.table("~/Desktop/80miss_byfam_SNP_info.csv", header = T,row.names=1)
THR =  -log10(0.05 / ( nrow(RESULTS) * (1-0.05)))
w = which((SNP_info_complete$pval) > (-log10(THR)) )
ggplot(SNP_info_complete, aes(Cumulative_bp, pval)) +
labs(x = "Chromosome (base pairs)", y = "-log(p-value)") +
theme(strip.background = element_blank(), axis.text.x = element_blank(), axis.ticks = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(), text = element_text(size = 14),
panel.background = element_rect(color = "grey"), axis.text = element_text(size = 14), axis.title = element_text(size = 14)) +
geom_point(size = 1, alpha = 1/2) +
geom_hline(yintercept = THR) +
scale_y_continuous(expand = c(0,0), limits = c(0, 50), position = "right") +
scale_x_continuous(expand = c(0,0)) +
facet_grid( ~ Chrom_chr, scales = "free_x", switch = "x")
library(reshape2)
library(ggplot2)
library(dplyr)
Fam_QTL_vis <- read.table("~/Desktop/80miss_byfam_SNP_info.csv", header = T,row.names=1)
parent_heading <- read.csv("~/Dropbox/GITHUB/BRIDG6/Datasets/Parents/NAM_parent_heading_nochecks_noduplicateparents.csv", header = T, na.strings = "NA")
Fam_QTL_vis[1:10,1:10]
SNP<-sub("X","",row.names(Fam_QTL_vis))
Fam_QTL_vis<-cbind(SNP,Fam_QTL_vis)
Fam_QTL_vis_few <- select(Fam_QTL_vis, c(SNP, Chrom_chr, Cumulative_bp, lod, (dim(Fam_QTL_vis)[2]-87) : dim(Fam_QTL_vis)[2]))
CHROM_LENGTH<-c(558535432, 768075024, 699711114, 647060158, 289164678, 583380513, 657224000)
for (n in 1:7){
print(n)
# Create an empty vector where empty bins will go
BIN_empy<-NULL
CHR<-Fam_QTL_vis_few[grep(paste(n,"H",sep=""), Fam_QTL_vis_few$Chrom_chr),]
BIN<-as.data.frame(rep(NA,dim(CHR)[1]))
colnames(BIN)<-"BIN"
CHR<-cbind(CHR,BIN)
#add a row of bin number
BIN_START<- 1
Bp_start<-1
# while the next bin is less than 1M to the end of the chromosome
WindowSize<-20000000
while(Bp_start < CHROM_LENGTH[n] ){
START<-Bp_start
END<-Bp_start + (WindowSize -1)
SNPsInBin<-which(CHR$Cumulative_bp >= START & CHR$Cumulative_bp <= END)
# if there are not SNPs in a bin then ad the bin number to the emtpy vector, otherwise add it to
# the new column in the DATA matrix
if (length(SNPsInBin) >0){
CHR[SNPsInBin,dim(CHR)[2]]<-paste("",BIN_START,sep="")
}else{BIN_empy<-c(BIN_empy,paste("",BIN_START,sep=""))}
Bp_start<-END+1
BIN_START<-BIN_START + 1
}
if (length(BIN_empy)>0){
BIN_extra<-as.data.frame(BIN_empy)
#matrix to add Bins without information
BIM_matrix<-matrix(0,ncol=(dim(CHR)[2] -1), nrow=length(BIN_empy))
BIM_full_matrix<-cbind(BIM_matrix,BIN_extra)
colnames(BIM_full_matrix)<-colnames(CHR)
# Combine bins in SNPs with those that didn't have any SNP
CHR_complete<-rbind(CHR,BIM_full_matrix)
}else{CHR_complete<-CHR}
assign(paste("CHR_",n,"",sep=""),CHR_complete)
}
head(Fam_QTL_vis_few)
Fam_QTL_vis_few[1:10,1:10]
CHROM_LENGTH<-c(558535432, 768075024, 699711114, 647060158, 289164678, 583380513, 657224000)
n<-1
print(n)
BIN_empy<-NULL
CHR<-Fam_QTL_vis_few[grep(paste(n,"H",sep=""), Fam_QTL_vis_few$Chrom_chr),]
BIN<-as.data.frame(rep(NA,dim(CHR)[1]))
colnames(BIN)<-"BIN"
CHR<-cbind(CHR,BIN)
CHR
dim(CHR)
table(Fam_QTL_vis_few$Chrom_chr)
BIN_START<- 1
Bp_start<-1
WindowSize<-20000000
while(Bp_start < CHROM_LENGTH[n] ){
START<-Bp_start
END<-Bp_start + (WindowSize -1)
SNPsInBin<-which(CHR$Cumulative_bp >= START & CHR$Cumulative_bp <= END)
# if there are not SNPs in a bin then ad the bin number to the emtpy vector, otherwise add it to
# the new column in the DATA matrix
if (length(SNPsInBin) >0){
CHR[SNPsInBin,dim(CHR)[2]]<-paste("",BIN_START,sep="")
}else{BIN_empy<-c(BIN_empy,paste("",BIN_START,sep=""))}
Bp_start<-END+1
BIN_START<-BIN_START + 1
}
dim(CHR)
if (length(BIN_empy)>0){
BIN_extra<-as.data.frame(BIN_empy)
#matrix to add Bins without information
BIM_matrix<-matrix(0,ncol=(dim(CHR)[2] -1), nrow=length(BIN_empy))
BIM_full_matrix<-cbind(BIM_matrix,BIN_extra)
colnames(BIM_full_matrix)<-colnames(CHR)
# Combine bins in SNPs with those that didn't have any SNP
CHR_complete<-rbind(CHR,BIM_full_matrix)
}else{CHR_complete<-CHR}
length(BIN_empy)
BIN_empy
length(BIN_empy)>0
BIN_extra<-as.data.frame(BIN_empy)
BIN_extra
BIM_matrix<-matrix(0,ncol=(dim(CHR)[2] -1), nrow=length(BIN_empy))
BIM_full_matrix<-cbind(BIM_matrix,BIN_extra)
colnames(BIM_full_matrix)<-colnames(CHR)
CHR_complete<-rbind(CHR,BIM_full_matrix)
CHR
BIM_full_matrix
CHR_complete<-rbind(CHR,BIM_full_matrix)
dim(CHR)
dim(BIM_full_matrix)
row.names(BIM_full_matrix)
col.names(BIM_full_matrix)
colnames(BIM_full_matrix)
colnames(CHR)
identical(colnames(CHR),colnames(BIM_full_matrix))
dim(CHR)
dim(BIM_full_matrix)
CHR_complete<-rbind(CHR,BIM_full_matrix)
CHR_complete
dim(CHR_complete)
for (n in 1:7){
print(n)
# Create an empty vector where empty bins will go
BIN_empy<-NULL
CHR<-Fam_QTL_vis_few[grep(paste(n,"H",sep=""), Fam_QTL_vis_few$Chrom_chr),]
BIN<-as.data.frame(rep(NA,dim(CHR)[1]))
colnames(BIN)<-"BIN"
CHR<-cbind(CHR,BIN)
#add a row of bin number
BIN_START<- 1
Bp_start<-1
# while the next bin is less than 1M to the end of the chromosome
WindowSize<-20000000
while(Bp_start < CHROM_LENGTH[n] ){
START<-Bp_start
END<-Bp_start + (WindowSize -1)
SNPsInBin<-which(CHR$Cumulative_bp >= START & CHR$Cumulative_bp <= END)
# if there are not SNPs in a bin then ad the bin number to the emtpy vector, otherwise add it to
# the new column in the DATA matrix
if (length(SNPsInBin) >0){
CHR[SNPsInBin,dim(CHR)[2]]<-paste("",BIN_START,sep="")
}else{BIN_empy<-c(BIN_empy,paste("",BIN_START,sep=""))}
Bp_start<-END+1
BIN_START<-BIN_START + 1
}
if (length(BIN_empy)>0){
BIN_extra<-as.data.frame(BIN_empy)
#matrix to add Bins without information
BIM_matrix<-matrix(0,ncol=(dim(CHR)[2] -1), nrow=length(BIN_empy))
BIM_full_matrix<-cbind(BIM_matrix,BIN_extra)
colnames(BIM_full_matrix)<-colnames(CHR)
# Combine bins in SNPs with those that didn't have any SNP
CHR_complete<-rbind(CHR,BIM_full_matrix)
}else{CHR_complete<-CHR}
assign(paste("CHR_",n,"",sep=""),CHR_complete)
}
DATA_w_bins<-rbind(CHR_1,CHR_2,CHR_3,CHR_4,CHR_5,CHR_6,CHR_7)
dim(DATA_w_bins)
DATA_w_bins[1:4,1:5]
DATA_w_bins[8020:8026,1:10]
Binned_means_max <- DATA_w_bins %>%
group_by(Chrom_chr, BIN) %>%
summarise_each(funs(max), allele.eff.founder.1:allele.eff.founder.88)
Binned_means_min <- DATA_w_bins %>%
group_by(Chrom_chr, BIN) %>%
summarise_each(funs(min), allele.eff.founder.1:allele.eff.founder.88)
Binned_means_abs <- DATA_w_bins %>%
group_by(Chrom_chr, BIN) %>%
summarise_each(funs(.[which.max(abs(.))]), allele.eff.founder.1:allele.eff.founder.88)
Binned_means_abs$BIN <- as.numeric(Binned_means_abs$BIN)
melted_QTL_try <- melt(Binned_means_abs, id.vars = c("Chrom_chr", "BIN"))
melted_QTL_try_ordered <- melted_QTL_try %>%
arrange(variable, Chrom_chr, BIN)
nbins <- nrow(melted_QTL_try_ordered)/88
Fam_num <- apply(melted_QTL_try_ordered, 1, function(x) strsplit(as.character(x), ".")[[1]][1])
Fam_num<-sub("allele.eff.founder.","",  melted_QTL_try_ordered$variable)
head(Fam_num)
melted_QTL_withfam <- cbind(melted_QTL_try_ordered, Fam_num)
parent_heading_sorted <- arrange(parent_heading, man_sort_reverse)
arranged_effects <- melted_QTL_withfam %>%
mutate(Fam_num = factor(Fam_num, levels = parent_heading_sorted$new_fam)) %>%
arrange(Fam_num)
subpopulation_levels <- c(rep("Central European", (17*nbins)), rep("Coastal Mediterranean", (19*nbins)), rep("East African", (8*nbins)), rep("Asian", (19*nbins)), rep("Admixed", (23*nbins)), rep("Unassigned", (2*nbins)))
arranged_effects$subpop <- subpopulation_levels
head(arranged_effects)
arranged_effects$subpop_sort = factor(arranged_effects$subpop, levels = c('Central European', 'Coastal Mediterranean', 'East African', 'Asian', 'Admixed', 'Un'))
arranged_effects_noNA <- filter(arranged_effects, Chrom_chr != "NA")
ggplot(data = arranged_effects_noNA, aes(x = BIN, y=factor(Fam_num), fill=value)) +
labs(x = "Chromosome", y = "Family and\nSubpopulation") +
facet_grid(subpop_sort ~ Chrom_chr, scales = "free", space = "free_y", switch = "both") +
scale_fill_gradient2(high = "red3", low = "navy", mid = "white", na.value = "grey", midpoint = 0, guide = "colorbar", "Allele\nEffect\n(Days)", limits = c(-4, 3)) +
geom_tile() +
theme(axis.title.y = element_blank(), strip.text.y = element_blank(), strip.background = element_blank(),
axis.text.x = element_blank(), axis.ticks = element_blank(), panel.border = element_blank(), text = element_text(size = 14),
panel.background = element_rect(color = "white"), panel.grid = element_blank(), legend.text = element_text(size = 14)) +
scale_x_continuous(expand = c(0,0))
ggplot() +
labs(x = "Exotic Parent Subpopulations", y = "Days to Heading") +
theme(strip.background = element_blank(), axis.ticks = element_blank(), axis.text.y = element_blank(), panel.grid.minor = element_blank(),
panel.grid.major = element_blank(), panel.background = element_rect(color = "grey"), legend.position = "bottom",
axis.text = element_text(size = 10), axis.title = element_text(size = 10), legend.text = element_text(size = 10), legend.title = element_text(size = 10)) +
facet_grid( subpop_sort ~ ., scales = "free_y", space = "free_y", switch = "y") +
geom_violin(data = NAM_heading_sorted, aes(x = factor(man_sort_reverse), y = hd), na.rm = T, draw_quantiles = 0.5) +
geom_point(data = parent_heading_sorted, aes(x = factor(man_sort_reverse), y =  Mean, color = parent_heading_sorted$Mean), shape = 21, fill = "black", stroke = 1, size = 1, na.rm = T) +
#scale_color_distiller(palette = "RdBu", na.value = NA, guide = FALSE) +
scale_color_gradient2(high = "red3", low = "navy", mid = "white", na.value = NA, midpoint = 52.5, breaks = c(40.8, 50, 60, 71), limits = c(40, 72), "Days to\nHeading") +
ylim(40, 72) +
geom_hline(yintercept = 52.5) +
coord_flip()
ggplot(data = arranged_effects_noNA, aes(x = BIN, y=factor(Fam_num), fill=value)) +
labs(x = "Chromosome", y = "Family and\nSubpopulation") +
facet_grid(subpop_sort ~ Chrom_chr, scales = "free", space = "free_y", switch = "both") +
scale_fill_gradient2(high = "red3", low = "navy", mid = "white", na.value = "grey", midpoint = 0, guide = "colorbar", "Allele\nEffect\n(Days)", limits = c(-4, 3)) +
geom_tile() +
theme(axis.title.y = element_blank(), strip.text.y = element_blank(), strip.background = element_blank(),
axis.text.x = element_blank(), axis.ticks = element_blank(), panel.border = element_blank(), text = element_text(size = 14),
panel.background = element_rect(color = "white"), panel.grid = element_blank(), legend.text = element_text(size = 14)) +
scale_x_continuous(expand = c(0,0))
rm(list=ls())
library(stringr)
LENGTH<-5000000
Polytest<-read.csv("~/Dropbox/SmithLab/NAM/Analysis/WholeNAM_80mis_6060ind/Imputed_Output/Filtered_maf_mis_LD/GWAS/forGWAS/LDKNNI/Output/my_gwas_PolyTest_out_80miss_BLUE.csv",header=T,row.names=1)
SNPnames<-read.csv("~/Dropbox/SmithLab/NAM/Analysis/WholeNAM_80mis_6060ind/Imputed_Output/Filtered_maf_mis_LD/GWAS/forGWAS/LDKNNI/Output/my_gwas_SNPs_out_80miss_BLUE.csv")
Families<-read.csv("/Users/agonzale/Dropbox/SmithLab/NAM/Analysis/WholeNAM_80mis_6060ind/Imputed_Output/Filtered_maf_mis_LD/GWAS/forGWAS/LDKNNI/Input/phenos_LDKNNI.csv",sep=",")
Parents_famNam<-read.table("/Users/agonzale/Documents/SmithLab/NAM/Data/Alex/Pop_structure_propDiss_JULY2016_parentLessMissingData_grep.txt",header=T)
Parents_famNam_or<-Parents_famNam[order(Parents_famNam$Family_grep),]
for (i in 1:dim(Parents_famNam_or)[1]){
Families[grep(Parents_famNam_or[i,"Family_grep"],Families$line_name),1]<-as.character(Parents_famNam_or[i,"Parent_lessMissingData"])
}
Family_ID_uniq<-Families[!duplicated(Families$family),]
Family_ID_uniq_or<-Family_ID_uniq[order(Family_ID_uniq[,"family"]),]
names(Polytest)[c(((dim(Polytest)[2])-88 +1):dim(Polytest)[2]) ] <-Family_ID_uniq_or[,1]
row.names(Polytest)<-sub("X","",SNPnames[,2])
Positions_phy_mbp <-as.data.frame(as.character(row.names(Polytest)))
Physical_positions <-  apply(Positions_phy_mbp,1, function(x) strsplit(as.character(x), "_")[[1]][2])
Physical_positions <-as.data.frame(Physical_positions)
row.names(Physical_positions)<-Positions_phy_mbp[,1]
for (i in 1:7){
CHR1<-grep(paste(i,"H1", sep=""),row.names(Physical_positions))
CHR2<-grep(paste(i,"H2", sep=""),row.names(Physical_positions))
assign(paste("CHR",i,"_1",sep=""), CHR1)
assign(paste("CHR",i,"_2",sep=""), CHR2)
}
List_chr_parts<-c("CHR1_1","CHR1_2","CHR2_1", "CHR2_2", "CHR3_1", "CHR3_2", "CHR4_1", "CHR4_2", "CHR5_1", "CHR5_2", "CHR6_1", "CHR6_2", "CHR7_1", "CHR7_2")
ADD_CHR<-c(0,312837513,558535432,952068106,1326610456,1720921089,2026321570,2381382776,2673381728,3054247210,3343411888,3638233958,3926792401,4252589917)
Positions_original<-Physical_positions[,1]
New_order_phy<-NULL
for (C in 1:14){
CHR_pos<-as.numeric(as.character(Physical_positions[get(List_chr_parts[C]),1]))
NEW_chr_pos<-CHR_pos + ADD_CHR[C]
New_order_phy <-c(New_order_phy ,NEW_chr_pos)
}
Positions_phy_mbp_cumul<-cbind(Positions_phy_mbp, New_order_phy)
Polytest_pos<-cbind(Positions_phy_mbp_cumul[,2],rep(NA,dim(Polytest)[1]),Polytest)
names(Polytest_pos)[1]<-"Cumul_Pos"
names(Polytest_pos)[2]<-"QTL_assig"
THR =  -log10(0.05 / ( nrow(Polytest) * (1-0.05)))
for (n in 1:7){
print(n)
# the first QTL is set to 1, use to digit numbers so 2.1 and 2.10 are differentiated
x<-1
Polytest_pos_chr<-Polytest_pos[grep(paste(n,"H",sep=""),row.names(Polytest_pos)),]
# Get a vector of positions of p-values that are significant
Pos_sig_pval<-Polytest_pos_chr[which(Polytest_pos_chr$pval >= THR),"Cumul_Pos"]
if(length(Pos_sig_pval)>0){
# Identify the position of the first significant marker and the position of +/- LENGTH
Bottom<-Pos_sig_pval[1] - LENGTH
Top<-Pos_sig_pval[1] + LENGTH
while(!is.na(Bottom <= (Pos_sig_pval[length(Pos_sig_pval)]))){
### If the positions between Bottom and Top are NA for QTL assignation, then assign a new QTL. Otherwise, assign whichever QTL already exist for the first SNP.
# SNPs in QTL
SNP_qtl<-which(Polytest_pos_chr$Cumul_Pos >= Bottom & Polytest_pos_chr$Cumul_Pos <= Top)
if (is.na(Polytest_pos_chr[SNP_qtl[1],"QTL_assig"])){QTLnumber<-(paste(n,"_",x,sep="")) ; x<-(x+1)}else{QTL_assig<-Polytest_pos_chr[SNP_qtl[1],"QTL_assig"]}
Polytest_pos_chr[SNP_qtl,"QTL_assig"]<-QTLnumber
# move to the next significant p-value outside the last QTL
Pos_sig_pval_new<-Pos_sig_pval[which(Pos_sig_pval >Top)[1]]
Bottom<-Pos_sig_pval_new -LENGTH
Top<-Pos_sig_pval_new + LENGTH
}
}else{Polytest_pos_chr<-Polytest_pos_chr}
assign(paste("CHROM_",n,sep=""),Polytest_pos_chr)
}
GenomeWide_QTLassigned<-rbind(CHROM_1, CHROM_2,CHROM_3,CHROM_4,CHROM_5, CHROM_6, CHROM_7)
plot(GenomeWide_QTLassigned$Cumul_Pos/1000000, GenomeWide_QTLassigned$pval, cex=0.6, ylab="-lob(p-value)",xlab="Physical Position (Mbp)")
abline(h=THR, col="red")
UNIQ_QTL<-unique(GenomeWide_QTLassigned[which(!is.na(GenomeWide_QTLassigned[,2])),2])
palette(rainbow(length(UNIQ_QTL)))
COLORS<-(palette(gray(seq(0,.9,len = 25))))
for (p in 1:length(UNIQ_QTL)){
QTLpoints<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned[,2] == UNIQ_QTL[p]),]
points(QTLpoints$Cumul_Pos/1000000, QTLpoints$pval, cex=0.6, col=COLORS[p])
}
abline(v=c(558535432,1326610456,2026321570,2673381728,3343411888,3926792401)/1000000, col="gray", lty=2)
QTL_all<-names(table(GenomeWide_QTLassigned[,2]))
QTLdescriptionTable<-matrix(NA,ncol=6,nrow=length(QTL_all))
colnames(QTLdescriptionTable)<-c("QTL","Maximum -log(p)","Number of significant SNP","Total number of SNP in QTL region (5Mbp)","Max. Families segregating","Min. Families Segregating")
for (i in 1:length(QTL_all)){
p_values<-GenomeWide_QTLassigned[grep(QTL_all[i],GenomeWide_QTLassigned$QTL_assig),"pval"]
QTLdescriptionTable[i,1]<-QTL_all[i]
QTLdescriptionTable[i,2]<-round(max(p_values),2)
QTLdescriptionTable[i,3]<-length(which(p_values >= THR))
QTLdescriptionTable[i,4]<-length(p_values)
# Get the max and minimum number of families for which a Significant SNP segregates in a QTL
data<-GenomeWide_QTLassigned[grep(QTL_all[i],GenomeWide_QTLassigned$QTL_assig),]
# get only significant SNPs in the QTL
data_sig<-data[which(data$pval >= THR),(dim(data)[2]-87):dim(data)[2]]
Segregation<-apply(data_sig,1, function(x) length(which(x >0)))
QTLdescriptionTable[i,5]<-max(Segregation)
QTLdescriptionTable[i,6]<-min(Segregation)
}
write.table(QTLdescriptionTable,"/Users/agonzale/Documents/SmithLab/NAM/Analysis/WholeNAM_80mis_6060ind/Imputed_Output/Filtered_maf_mis_LD/GWAS/forGWAS/LDKNNI/Output/QTLassignation_ANA/Summary_QTL_max.xls",quote=F,row.names=F,col.names=T,sep="\t")
QTLdescriptionTable
library(ggplot2)
rm(list=ls())
library(ggplot2)
library(dplyr)
library(reshape2)
Fam_QTL_vis <- read.table("~/Dropbox/SmithLab/NAM/Analysis/WholeNAM_80mis_6060ind/Imputed_Output/Filtered_maf_mis_LD/GWAS/forGWAS/LDKNNI/Output/QTLassignation_ANA/GenomeWide_QTLassigned_5e+06.xls", header = T)
THR =  -log10(0.05 / ( nrow(Fam_QTL_vis) * (1-0.05)))
Few <- Fam_QTL_vis [,c(1,2,7, (dim(Fam_QTL_vis)[2]-87) : (dim(Fam_QTL_vis)[2]))]
QTLnames<-names(table(Fam_QTL_vis$QTL_assig))
for (q in 1:length(QTLnames)){
Effects<-filter(Few,QTL_assig==QTLnames[q] & pval>=THR)
assign(paste("Effects_",QTLnames[q],sep=""),Effects)
}
for (p in 1:length(QTLnames)){
QTL_eff = get(paste("Effects_",QTLnames[p],sep="")) %>%
summarise_each(funs(.[which.max(abs(.))]), -c(1:3))
assign(paste("QTL_",QTLnames[p],sep=""),QTL_eff)
}
for (y in 1:length(QTLnames)){
melted_qtl <- melt(get(paste("QTL_",QTLnames[y],sep="")))
assign(paste("melted_",QTLnames[y],sep=""),melted_qtl)
}
QTL_effects<-as.data.frame(names(Few)[-c(1:3)])
for (z in 1:length(QTLnames)){
data<-get(paste("melted_",QTLnames[z],sep=""))
QTL_effects <- cbind(QTL_effects, data$value)
names(QTL_effects)[dim(QTL_effects)[2]]<-QTLnames[z]
}
names(QTL_effects)[1]<-"family"
parent_heading <- read.csv("~/Dropbox/GITHUB/BRIDG6/Datasets/Parents/NAM_parent_heading_nochecks_noduplicateparents.csv", header = T, na.strings = "NA", stringsAsFactors = F)
Parent_subpop <- select(parent_heading, c(new_fam, Pop_location))
colnames(Parent_subpop)[1] <- "family"
QTL_effects$family <- c(1:88)
Effect_subpop <- full_join(Parent_subpop, QTL_effects, by = "family")
melted_eff <- melt(Effect_subpop, id.vars = c("family", "Pop_location"))
melted_eff[melted_eff == 0] <- NA
ggplot(melted_eff, aes(value)) +
labs(x = "Allele Effect", y = "Frequency") +
facet_grid(variable ~ ., switch = "y", scales = "free") +
scale_fill_manual(name = "BRIDG6 Diverse\nParent Subpopulation", values = c("goldenrod1", "violet", "olivedrab3", "turquoise1", "red", "grey55")) +
theme(strip.background = element_blank(), panel.grid.major = element_blank(),
axis.ticks = element_blank(), panel.border = element_blank(), text = element_text(size = 8),
legend.text = element_text(size = 14), strip.placement = "outside") +
scale_x_continuous(expand = c(0,0)) +
geom_histogram(binwidth = .2, aes(fill = factor(Pop_location)), na.rm = T)
melted_eff_4<-melted_eff[which(melted_eff$variable == "2_1" |melted_eff$variable=="7_2"|melted_eff$variable=="7_1"|melted_eff$variable=="3_1"),]
ggplot(melted_eff_4, aes(value)) +
labs(x = "Allele Effect", y = "Frequency") +
facet_grid(variable ~ ., switch = "y", scales = "free") +
scale_fill_manual(name = "BRIDG6 Diverse\nParent Subpopulation", values = c("goldenrod1", "violet", "olivedrab3", "turquoise1", "red", "grey55")) +
theme(strip.background = element_blank(), panel.grid.major = element_blank(),
axis.ticks = element_blank(), panel.border = element_blank(), text = element_text(size = 10),
legend.text = element_text(size = 14) ) +
scale_x_continuous(expand = c(0,0)) +
geom_histogram(binwidth = .2, aes(fill = factor(Pop_location)), na.rm = T)
pdf("~/Desktop/FigureS1.pdf",width=7,height=11)
ggplot(melted_eff, aes(value)) +
labs(x = "Allele Effect", y = "Frequency") +
facet_grid(variable ~ ., switch = "y", scales = "free") +
scale_fill_manual(name = "BRIDG6 Diverse\nParent Subpopulation", values = c("goldenrod1", "violet", "olivedrab3", "turquoise1", "red", "grey55")) +
theme(strip.background = element_blank(), panel.grid.major = element_blank(),
axis.ticks = element_blank(), panel.border = element_blank(), text = element_text(size = 8),
legend.text = element_text(size = 14), strip.placement = "outside") +
scale_x_continuous(expand = c(0,0)) +
geom_histogram(binwidth = .2, aes(fill = factor(Pop_location)), na.rm = T)
dev.off()
rm (list =ls())
GenomeWide_QTLassigned<-read.table("~/Dropbox/SmithLab/NAM/Analysis/WholeNAM_80mis_6060ind/Imputed_Output/Filtered_maf_mis_LD/GWAS/forGWAS/LDKNNI/Output/QTLassignation_ANA/GenomeWide_QTLassigned_5e+06.xls",header=T)
THR =  -log10(0.05 / ( nrow(GenomeWide_QTLassigned) * (1-0.05)))
SIG<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned$pval >= THR),c(((dim(GenomeWide_QTLassigned)[2])-87):dim(GenomeWide_QTLassigned)[2])]
SEG_Fam<-NULL
for(s in 1:dim(SIG)[1]){
SEG_Fam<-c(SEG_Fam,length(which(SIG[s,] != 0)))
}
SIGqtl<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned$pval >= THR),c(2,((dim(GenomeWide_QTLassigned)[2])-87):dim(GenomeWide_QTLassigned)[2])]
QTL_all_sig<-names(table(SIGqtl[,1]))
QTLsegFamMin<-matrix(NA,ncol=2,nrow=length(QTL_all_sig))
for (q in 1:length(QTL_all_sig)){
EFFECTS<-SIGqtl[(grep(QTL_all_sig[q],SIGqtl[,1])),]
SEG_Fam_qtl<-NULL
for(s in 1:dim(EFFECTS)[1]){
SEG_Fam_qtl<-c(SEG_Fam_qtl,length(which(EFFECTS[s,-1] != 0)))
}
QTLsegFamMin[q,1]<-QTL_all_sig[q]
QTLsegFamMin[q,2]<-min(SEG_Fam_qtl)
}
summary(as.numeric(as.matrix(QTLsegFamMin[,2])))
SIGqtl_size<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned$pval >= THR),c(1:2)]
INTERVAL<-matrix(NA,ncol=2,nrow=length(QTL_all_sig))
for (q in 1:length(QTL_all_sig)){
SNPinQTL<-SIGqtl_size[(grep(QTL_all_sig[q],SIGqtl_size[,2])),]
start_pos<-SNPinQTL[1,1]
end_pos<-SNPinQTL[dim(SNPinQTL)[1],1]
interval<-end_pos-start_pos
INTERVAL[q,1]<-QTL_all_sig[q]
INTERVAL[q,2]<-interval
}
INTERVAL[which(INTERVAL[,2]==0),2]<-c("5000000")
summary(as.numeric(as.matrix(INTERVAL[,2])))
SIGqtl<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned$pval >= THR),c(((dim(GenomeWide_QTLassigned)[2])-87):dim(GenomeWide_QTLassigned)[2])]
MaxMin_alleleEff<-matrix(NA, ncol=3,nrow=dim(SIGqtl)[1])
MaxMin_alleleEff[,1]<-row.names(SIGqtl)
for (q in 1:(dim(SIGqtl)[1])){
MaxMin_alleleEff[q,2]<-min(SIGqtl[q,])
MaxMin_alleleEff[q,3]<-max(SIGqtl[q,])
}
plot(MaxMin_alleleEff[,2],col="white", ylim=c(as.numeric(min(MaxMin_alleleEff[,2]))-5,as.numeric(max(MaxMin_alleleEff[,3]))))
lines(MaxMin_alleleEff[,2],col="blue")
lines(MaxMin_alleleEff[,3],col="red")
SIGqtl<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned$pval >= THR),c(2,((dim(GenomeWide_QTLassigned)[2])-87):dim(GenomeWide_QTLassigned)[2])]
qtl2_1<-SIGqtl[which(SIGqtl$QTL_assig == "2_1"),-1]
QTLmax_min_fam<-matrix(NA,ncol=2,nrow=88)
row.names(QTLmax_min_fam)<-colnames(qtl2_1)
for (f in 1:88){
QTLmax_min_fam[f,1]<-max(qtl2_1[,f])
QTLmax_min_fam[f,2]<-min(qtl2_1[,f])
}
Allele_effect<-function(dat){
abs_val<-max(abs(dat[1]),abs(dat[2]))
if(abs(dat[1]) == abs_val & abs(dat[2]) != abs_val){alleleEff<-dat[1]}
if(abs(dat[2]) == abs_val & abs(dat[1]) != abs_val){alleleEff<-dat[2]}
if(abs(dat[1]) == abs_val & abs(dat[2]) == abs_val){alleleEff<-dat[1]}
return(alleleEff)
}
QTLeffect<-as.data.frame(apply(QTLmax_min_fam,1,Allele_effect))
QTLmax_min_fam_effect<-cbind(QTLmax_min_fam,QTLeffect)
names(QTLmax_min_fam_effect)[3]<-"AllelesEffectQTL"
length(which(QTLmax_min_fam_effect[,3] > 0)) #43
length(which(QTLmax_min_fam_effect[,3] < 0)) #45
Annotations<-read.csv("~/Dropbox/GITHUB/BRIDG6/Datasets/Annotations/FT_annotations_select.csv",sep=",")
Annotations_chr<-Annotations[-grep("UN", Annotations$Gene_Ch),]
CHROM_length<-c(0,558535432,1326610456,2026321570,2673381728,3343411888,3926792401,4584016401)
Annotations_chr$Cumul_posStart<-rep(NA,dim(Annotations_chr)[1])
Annotations_chr$Cumul_posEnd<-rep(NA,dim(Annotations_chr)[1])
Annotations_chr$Cumul_posMid<-rep(NA,dim(Annotations_chr)[1])
for (c in 1:7){
#cumul start
CumPos_start<-Annotations_chr[grep(paste(c,"H",sep=""), Annotations_chr$Gene_Ch), 5] + CHROM_length[c]
Annotations_chr[grep(paste(c,"H",sep=""), Annotations_chr$Gene_Ch),"Cumul_posStart"]<-CumPos_start
#cumul end
CumPos_end<-Annotations_chr[grep(paste(c,"H",sep=""), Annotations_chr$Gene_Ch), 6] + CHROM_length[c]
Annotations_chr[grep(paste(c,"H",sep=""), Annotations_chr$Gene_Ch),"Cumul_posEnd"]<-CumPos_end
#cumul mid point
CumPos_mid<-Annotations_chr[grep(paste(c,"H",sep=""), Annotations_chr$Gene_Ch), 7] + CHROM_length[c]
Annotations_chr[grep(paste(c,"H",sep=""), Annotations_chr$Gene_Ch),"Cumul_posMid"]<-CumPos_mid
}
Annotations_genes<-Annotations_chr[!is.na(Annotations_chr$Cumul_posStart),c(1,2,4,16,17,18)]
QTLsummary<-matrix(NA,ncol=2, nrow=length(QTL_all_sig))
row.names(QTLsummary)<-QTL_all_sig
colnames(QTLsummary)<-c("start","End")
for (z in 1:length(QTL_all_sig)){
QTL_snps<-GenomeWide_QTLassigned[grep(QTL_all_sig[z],GenomeWide_QTLassigned$QTL_assig),1]
if(length(QTL_snps) >0){
QTLsummary[z,1]<-QTL_snps[1]
QTLsummary[z,2]<-QTL_snps[length(QTL_snps)]
}else{QTLsummary[z,1] <-QTL_snps[1] ; QTLsummary[z,2] <-QTL_snps[1] }
}
DISTANCE<-5000000
Table_SNPnearest<-matrix(NA,nrow=1,ncol=10)
colnames(Table_SNPnearest)<-c("QTL","SNP","SNP -log(p)","QTL -log(p)","Nearest candidate gene","Distance to SNP","Chromosome","Minimum allele Effect","Maximum allele effect","Segregating Families")
for (k in 1:dim(QTLsummary)[1]){
GENE<-Annotations_genes[which(Annotations_genes$Cumul_posMid >= (QTLsummary[k,"start"]- DISTANCE) &Annotations_genes$Cumul_posMid <= (QTLsummary[k,"End"] + DISTANCE)),]
#find the SNP closest to each of the found genes
if(dim(GENE)[1]>0){
for (g in 1:dim(GENE)[1]){
print (g)
SNPnearest<-(GenomeWide_QTLassigned[which(abs(GenomeWide_QTLassigned[,1]-GENE[g,6])==min(abs(GenomeWide_QTLassigned[,1]-GENE[g,6]))),])
# QTLname
QTLpresent<-(GenomeWide_QTLassigned[which(abs(GenomeWide_QTLassigned[,1]-GENE[1,6])==min(abs(GenomeWide_QTLassigned[,1]-GENE[1,6]))),2])
#Maximum lod score for any SNP in the QTL
QTLinfo<-GenomeWide_QTLassigned[grep(QTLpresent, GenomeWide_QTLassigned$QTL_assig),]
MAXLOD<-max(QTLinfo$pval)
#LOD score for nearest SNP
SNP_LOD<-SNPnearest$pval
#how close is the SNP to the mid point of the gene
DISTANCE<-abs(GenomeWide_QTLassigned[,1]-GENE[g,6])[which(abs(GenomeWide_QTLassigned[,1]-GENE[g,6])==min(abs(GenomeWide_QTLassigned[,1]-GENE[g,6])))]
#Abbreviation nearest gene
NEAREST_GENE<-GENE[g,2]
#chromosome. Keep the information from the first SNP in the QTL
CHR<-GENE[1,3]
# number of SNPs in QTL region
SNP_region<-dim(QTLinfo)[1]
# minumul allele effect for the SNP
MIN_alleleEff<-min(SNPnearest[,c((dim(SNPnearest)[2] - 87):dim(SNPnearest)[2])])
MAX_alleleEff<-max(SNPnearest[,c((dim(SNPnearest)[2] - 87):dim(SNPnearest)[2])])
# number of families segregating for the allele
NumFAM_SEG<-length(which(SNPnearest[,c((dim(SNPnearest)[2] - 87):dim(SNPnearest)[2])] != 0))
#construct table
Table_part<-data.frame(QTLpresent,row.names(SNPnearest), SNP_LOD,MAXLOD,NEAREST_GENE,round(DISTANCE/1000000,digits=3),CHR,MIN_alleleEff, MAX_alleleEff, NumFAM_SEG )
names(Table_part)<-c("QTL","SNP","SNP -log(p)","QTL -log(p)","Nearest candidate gene","Distance to SNP","Chromosome","Minimum allele Effect","Maximum allele effect","Segregating Families")
Table_SNPnearest<-rbind(Table_SNPnearest,Table_part)
}
}
#print (paste( row.names(QTLsummary)[k], ":" ,as.character(GENE)))
}
Table_SNPnearest<-Table_SNPnearest[-1,]
Table_SNPnearest
