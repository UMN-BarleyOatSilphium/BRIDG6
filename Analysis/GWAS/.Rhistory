rm(list=ls())
library(NAM)
library(ggplot2)
library(dplyr)
gen_raw <- read.table("~/Dropbox/SmithLab/NAM/Analysis/WholeNAM_80mis_6060ind/Imputed_Output/Filtered_maf_mis_LD/Final_filt_LDKNNI_noMis_noNAHHras_rasBased_MAF5_noLD.txt", header = T)
dim(gen_raw)
gen_raw[1:10,1:3]
gen_rawX <- read.table("~/Dropbox/SmithLab/NAM/Analysis/WholeNAM_80mis_6060ind/Imputed_Output/Filtered_maf_mis_LD/Final_filt_Fillin_noMis_noNAHHras_rasBased_MAF5_noLD.txt", header = T)
dim(gen_rawX)
gen_raw_t <- t(gen_raw)
write.csv(gen_raw_t, "~/Dropbox/SmithLab/NAM/Analysis/WholeNAM_80mis_6060ind/Imputed_Output/Filtered_maf_mis_LD/GWAS/Genotypes/Final_filt_LDKNNI_noMis_noNAHHras_rasBased_MAF5_noLD_t.csv")
y <- read.csv("~/Dropbox/GITHUB/BRIDG6/Datasets/Phenotypes/DAP_BLUPs_nob_no2_no19.csv", header=T)
gen <- read.csv("~/Dropbox/SmithLab/NAM/Analysis/WholeNAM_80mis_6060ind/Imputed_Output/Filtered_maf_mis_LD/GWAS/Genotypes/Final_filt_LDKNNI_noMis_noNAHHras_rasBased_MAF5_noLD_t.csv", header = T)
class(y)
class(gen)
dim(y)
dim(gen)
gen_noRas <- gen[-1,]
gen_1<-gen_noRas[(gen_noRas[,1] %in% y[,1] ),]
gen_2 <- gen_1[rowSums(is.na(gen_1)) != ncol(gen_1),]
print (paste("There were", dim(gen_1)[1] - dim(gen_2)[1], "samples with all SNPs missing", sep=" "))
y_1 <- y[match(gen_2$X, y$line_name, nomatch = NA, incomparables = F),]
y_2 <- y_1[rowSums(is.na(y_1)) != ncol(y_1),]
gen_2_or<-gen_2[match(y_2[,1] , gen_2[,1]),]
if (identical(as.character(gen_2_or[,1]), as.character(y_2[,1])) == FALSE) stop("Phenotypes and Genotypes samples do not match")
gen_naked <- select(gen_2_or, -(X))
adjusted_genotypes = snpQC( gen=gen_naked, MAF=0.05, impute=FALSE)
rownames(adjusted_genotypes) = y_2$line_name
dim(adjusted_genotypes)
na_count <-sapply(adjusted_genotypes, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count)
na_count$name<-rownames(na_count)
het_count <-sapply(adjusted_genotypes, function(y) sum(length(which(y == 1))))
het_count <- data.frame(het_count)
het_count$name<-rownames(het_count)
alt_count <-sapply(adjusted_genotypes, function(y) sum(length(which(y == 0))))
alt_count <- data.frame(alt_count)
alt_count$name<-rownames(alt_count)
Ras_count <-sapply(adjusted_genotypes, function(y) sum(length(which(y == 2))))
Ras_count <- data.frame(Ras_count)
Ras_count$name<-rownames(Ras_count)
geno_freq <- cbind(alt_count, het_count,Ras_count )
geno_frequency <- geno_freq[,-c(2,4,6)]
geno_frequency$name<-rownames(geno_freq)
library(reshape2)
melted_freq <- melt(geno_frequency, id.vars = "name")
ggplot(melted_freq, aes(value, fill = factor(variable))) +
labs(x = "Number of Observations in the BRIDG6", y = "Number of Markers") +
scale_fill_manual(name="Genotype",values= c("Blue", "yellow", "red"), labels = c( "Donor Parent", "Heterozygous","Rasmusson")) +
geom_histogram(bins = 50, alpha = 0.6)
ggplot(Ras_count, aes(Ras_count)) +
geom_histogram(bins = 50)
ggplot(alt_count, aes(alt_count)) +
geom_histogram(bins = 50)
chr = data.frame(table(gsub("._.+$", "",colnames(adjusted_genotypes))))[,2]
write.csv(adjusted_genotypes, "~/Dropbox/SmithLab/NAM/Analysis/WholeNAM_80mis_6060ind/Imputed_Output/Filtered_maf_mis_LD/GWAS/forGWAS/genos_LDKNNI.csv")
write.csv(y_2, "~/Dropbox/SmithLab/NAM/Analysis/WholeNAM_80mis_6060ind/Imputed_Output/Filtered_maf_mis_LD/GWAS/forGWAS/phenos_LDKNNI.csv")
rm(list=ls())
library(stringr)
# Determine length (bp) before and after a significant SNP to be defined as one QTL
LENGTH<-5000000
# Get output after GWAS
Polytest<-read.csv("~/Dropbox/SmithLab/NAM/Analysis/WholeNAM_80mis_6060ind/Imputed_Output/Filtered_maf_mis_LD/GWAS/forGWAS/LDKNNI/Output/my_gwas_PolyTest_out_80miss_BLUE.csv",header=T,row.names=1)
# SNP names
SNPnames<-read.csv("~/Dropbox/SmithLab/NAM/Analysis/WholeNAM_80mis_6060ind/Imputed_Output/Filtered_maf_mis_LD/GWAS/forGWAS/LDKNNI/Output/my_gwas_SNPs_out_80miss_BLUE.csv")
# Order of family names
Families<-read.csv("/Users/agonzale/Dropbox/SmithLab/NAM/Analysis/WholeNAM_80mis_6060ind/Imputed_Output/Filtered_maf_mis_LD/GWAS/forGWAS/LDKNNI/Input/phenos_LDKNNI.csv",sep=",")
# Import parent names
Parents_famNam<-read.table("/Users/agonzale/Documents/SmithLab/NAM/Data/Alex/Pop_structure_propDiss_JULY2016_parentLessMissingData_grep.txt",header=T)
# Sort by family_grep
Parents_famNam_or<-Parents_famNam[order(Parents_famNam$Family_grep),]
# Add Parent name to each individual
for (i in 1:dim(Parents_famNam_or)[1]){
Families[grep(Parents_famNam_or[i,"Family_grep"],Families$line_name),1]<-as.character(Parents_famNam_or[i,"Parent_lessMissingData"])
}
#select unique entries for total 88 families
Family_ID_uniq<-Families[!duplicated(Families$family),]
#sort by family entry order
Family_ID_uniq_or<-Family_ID_uniq[order(Family_ID_uniq[,"family"]),]
# Add parents names to the allele effect columns
names(Polytest)[c(((dim(Polytest)[2])-88 +1):dim(Polytest)[2]) ] <-Family_ID_uniq_or[,1]
# Add SNP names to the GWAS output
row.names(Polytest)<-sub("X","",SNPnames[,2])
# Fix physical positions genome-wide
Positions_phy_mbp <-as.data.frame(as.character(row.names(Polytest)))
Physical_positions <-  apply(Positions_phy_mbp,1, function(x) strsplit(as.character(x), "_")[[1]][2])
Physical_positions <-as.data.frame(Physical_positions)
row.names(Physical_positions)<-Positions_phy_mbp[,1]
for (i in 1:7){
CHR1<-grep(paste(i,"H1", sep=""),row.names(Physical_positions))
CHR2<-grep(paste(i,"H2", sep=""),row.names(Physical_positions))
assign(paste("CHR",i,"_1",sep=""), CHR1)
assign(paste("CHR",i,"_2",sep=""), CHR2)
}
List_chr_parts<-c("CHR1_1","CHR1_2","CHR2_1", "CHR2_2", "CHR3_1", "CHR3_2", "CHR4_1", "CHR4_2", "CHR5_1", "CHR5_2", "CHR6_1", "CHR6_2", "CHR7_1", "CHR7_2")
# Number of bp to add to each part to have a cumulative physical position
ADD_CHR<-c(0,312837513,558535432,952068106,1326610456,1720921089,2026321570,2381382776,2673381728,3054247210,3343411888,3638233958,3926792401,4252589917)
#Calculate joint physical positions for both parts of a chromosome, then calculate Cumulative positons genome wide
Positions_original<-Physical_positions[,1]
New_order_phy<-NULL
for (C in 1:14){
CHR_pos<-as.numeric(as.character(Physical_positions[get(List_chr_parts[C]),1]))
NEW_chr_pos<-CHR_pos + ADD_CHR[C]
New_order_phy <-c(New_order_phy ,NEW_chr_pos)
}
Positions_phy_mbp_cumul<-cbind(Positions_phy_mbp, New_order_phy)
# Add cumulative positions and a columns of NA for QTL assignation
Polytest_pos<-cbind(Positions_phy_mbp_cumul[,2],rep(NA,dim(Polytest)[1]),Polytest)
names(Polytest_pos)[1]<-"Cumul_Pos"
names(Polytest_pos)[2]<-"QTL_assig"
### Assign QTL
# Get threshold for significant level
THR =  -log10(0.05 / ( nrow(Polytest) * (1-0.05)))
# Work one chromosome at the time
for (n in 1:7){
print(n)
# the first QTL is set to 1, use to digit numbers so 2.1 and 2.10 are differentiated
x<-1
Polytest_pos_chr<-Polytest_pos[grep(paste(n,"H",sep=""),row.names(Polytest_pos)),]
# Get a vector of positions of p-values that are significant
Pos_sig_pval<-Polytest_pos_chr[which(Polytest_pos_chr$pval >= THR),"Cumul_Pos"]
if(length(Pos_sig_pval)>0){
# Identify the position of the first significant marker and the position of +/- LENGTH
Bottom<-Pos_sig_pval[1] - LENGTH
Top<-Pos_sig_pval[1] + LENGTH
while(!is.na(Bottom <= (Pos_sig_pval[length(Pos_sig_pval)]))){
### If the positions between Bottom and Top are NA for QTL assignation, then assign a new QTL. Otherwise, assign whichever QTL already exist for the first SNP.
# SNPs in QTL
SNP_qtl<-which(Polytest_pos_chr$Cumul_Pos >= Bottom & Polytest_pos_chr$Cumul_Pos <= Top)
if (is.na(Polytest_pos_chr[SNP_qtl[1],"QTL_assig"])){QTLnumber<-(paste(n,"_",x,sep="")) ; x<-(x+1)}else{QTL_assig<-Polytest_pos_chr[SNP_qtl[1],"QTL_assig"]}
Polytest_pos_chr[SNP_qtl,"QTL_assig"]<-QTLnumber
# move to the next significant p-value outside the last QTL
Pos_sig_pval_new<-Pos_sig_pval[which(Pos_sig_pval >Top)[1]]
Bottom<-Pos_sig_pval_new -LENGTH
Top<-Pos_sig_pval_new + LENGTH
}
}else{Polytest_pos_chr<-Polytest_pos_chr}
assign(paste("CHROM_",n,sep=""),Polytest_pos_chr)
}
GenomeWide_QTLassigned<-rbind(CHROM_1, CHROM_2,CHROM_3,CHROM_4,CHROM_5, CHROM_6, CHROM_7)
GenomeWide_QTLassigned[1:5,17:20]
plot(GenomeWide_QTLassigned$Cumul_Pos/1000000, GenomeWide_QTLassigned$pval, cex=0.6, ylab="-lob(p-value)",xlab="Physical Position (Mbp)")
abline(h=THR, col="red")
UNIQ_QTL<-unique(GenomeWide_QTLassigned[which(!is.na(GenomeWide_QTLassigned[,2])),2])
palette(rainbow(length(UNIQ_QTL)))
COLORS<-(palette(gray(seq(0,.9,len = 25))))
for (p in 1:length(UNIQ_QTL)){
QTLpoints<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned[,2] == UNIQ_QTL[p]),]
points(QTLpoints$Cumul_Pos/1000000, QTLpoints$pval, cex=0.6, col=COLORS[p])
}
abline(v=c(558535432,1326610456,2026321570,2673381728,3343411888,3926792401)/1000000, col="gray", lty=2)
UNIQ_QTL
p<-3
QTLpoints<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned[,2] == UNIQ_QTL[p]),]
dim(QTLpoints)
QTLpoints[1:10,1:8]
which(QTLpoints$pval >= THR)
length(which(QTLpoints$pval >= THR))
