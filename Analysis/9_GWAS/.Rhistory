THR = -log10(0.05 / ( nrow(RESULTS) * (1-0.05)))
# See how many SNPs are above the significance threshold
Results_sig <- filter(RESULTS, lod > THR) # 100 significant markers
w <- length(Results_sig)
# Add SNP names to mapping results
row.names(RESULTS)<-as.character(NAMES[,2])
# Get SNP names, separate the position and chromosome number
SNP_original_names <- as.data.frame(gsub("X", "", row.names(RESULTS)))
Physical_positions<- apply(SNP_original_names,1, function(x) strsplit(as.character(x), "_")[[1]][2])
Physical_positions<-as.data.frame(Physical_positions)
Physical_positions<-cbind(SNP_original_names[,1],Physical_positions)
ADD_CHR<-c(312837513,393532674,394310633,355061206,380865482,294822070,325797516)
for (i in 1:7){
CHR1<-Physical_positions [grep(paste(i,"H1", sep=""),Physical_positions[,1]),]
CHR2<-Physical_positions [grep(paste(i,"H2", sep=""),Physical_positions[,1]),]
CHRboth<-rbind(CHR1,CHR2)
CHR2_corrected<-as.numeric(as.character(CHR2[,2])) + ADD_CHR[i]
CHRall_pos<-c(as.numeric(as.character(CHR1[,2])), CHR2_corrected)
Positions_corrected<-cbind(CHRboth, CHRall_pos)
assign(paste("CHR_cor_",i,sep=""), Positions_corrected)
}
NEW_positions<-rbind(CHR_cor_1, CHR_cor_2, CHR_cor_3, CHR_cor_4, CHR_cor_5, CHR_cor_6, CHR_cor_7)
# Add column with chromosome names
CHROM<-apply(SNP_original_names,1, function(x) strsplit(as.character(x), "_")[[1]][1])
Chrom_chr<-sub("H1|H2","H",CHROM)
# Add new column to data frame
Results_complete<- cbind(NEW_positions[,3],Chrom_chr,RESULTS)
names(Results_complete)[1]<-"Cumulative_bp"
write.table(Results_complete, "~/Desktop/80miss_byfam_SNP_info.csv",quote=F,row.names=T,col.names=T,sep="\t")
SNP_info_complete <- read.table("~/Desktop/80miss_byfam_SNP_info.csv", header = T,row.names=1)
###<<<*** Manhattan plot ***>>>###
THR =  -log10(0.05 / ( nrow(RESULTS) * (1-0.05)))
#THR =  -log10(0.05 / ( ncol(SNP_info_complete) * (1-0.05)))
w = which((SNP_info_complete$pval) > (-log10(THR)) )
# Simple manhattan, manuscript version
ggplot(SNP_info_complete, aes(Cumulative_bp, pval)) +
labs(x = "Chromosome (base pairs)", y = "-log(p-value)") +
theme(strip.background = element_blank(), axis.text.x = element_blank(), axis.ticks = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(), text = element_text(size = 14),
panel.background = element_rect(color = "grey"), axis.text = element_text(size = 14), axis.title = element_text(size = 14)) +
geom_point(size = 1, alpha = 1/2) +
geom_hline(yintercept = THR) +
scale_y_continuous(expand = c(0,0), limits = c(0, 50), position = "right") +
scale_x_continuous(expand = c(0,0)) +
facet_grid( ~ Chrom_chr, scales = "free_x", switch = "x")
# Export as 3x12 landscape dei
pdf("~/Documents/SmithLab/NAM/write/Bridgs_edited_files_v2/Figures/Figure3c.pdf",height=3,width=11)
ggplot(SNP_info_complete, aes(Cumulative_bp, pval)) +
labs(x = "Chromosome (base pairs)", y = "-log(p-value)") +
theme(strip.background = element_blank(), axis.text.x = element_blank(), axis.ticks = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(), text = element_text(size = 14),
panel.background = element_rect(color = "grey"), axis.text = element_text(size = 14), axis.title = element_text(size = 14)) +
geom_point(size = 1, alpha = 1/2) +
geom_hline(yintercept = THR) +
scale_y_continuous(expand = c(0,0), limits = c(0, 50), position = "right") +
scale_x_continuous(expand = c(0,0)) +
facet_grid( ~ Chrom_chr, scales = "free_x", switch = "x")
dev.off()
rm(list=ls())
library(reshape2)
library(ggplot2)
library(dplyr)
# Heatmap of allele effects
Fam_QTL_vis <- read.table("~/Desktop/80miss_byfam_SNP_info.csv", header = T,row.names=1)
parent_heading <- read.csv("~/Dropbox/GITHUB/BRIDG6/Datasets/Parents/NAM_parent_heading_nochecks_noduplicateparents.csv", header = T, na.strings = "NA")
Fam_QTL_vis[1:10,1:10]
# add column with SNP names
SNP<-sub("X","",row.names(Fam_QTL_vis))
Fam_QTL_vis<-cbind(SNP,Fam_QTL_vis)
# Get useful columns
Fam_QTL_vis_few <- select(Fam_QTL_vis, c(SNP, Chrom_chr, Cumulative_bp, lod, (dim(Fam_QTL_vis)[2]-87) : dim(Fam_QTL_vis)[2]))
CHROM_LENGTH<-c(558535432, 768075024, 699711114, 647060158, 289164678, 583380513, 657224000)
#work one chromsoome at a time
for (n in 1:7){
print(n)
# Create an empty vector where empty bins will go
BIN_empy<-NULL
CHR<-Fam_QTL_vis_few[grep(paste(n,"H",sep=""), Fam_QTL_vis_few$Chrom_chr),]
BIN<-as.data.frame(rep(NA,dim(CHR)[1]))
colnames(BIN)<-"BIN"
CHR<-cbind(CHR,BIN)
#add a row of bin number
BIN_START<- 1
Bp_start<-1
# while the next bin is less than 1M to the end of the chromosome
WindowSize<-20000000
while(Bp_start < CHROM_LENGTH[n] ){
START<-Bp_start
END<-Bp_start + (WindowSize -1)
SNPsInBin<-which(CHR$Cumulative_bp >= START & CHR$Cumulative_bp <= END)
# if there are not SNPs in a bin then ad the bin number to the emtpy vector, otherwise add it to
# the new column in the DATA matrix
if (length(SNPsInBin) >0){
CHR[SNPsInBin,dim(CHR)[2]]<-paste("",BIN_START,sep="")
}else{BIN_empy<-c(BIN_empy,paste("",BIN_START,sep=""))}
Bp_start<-END+1
BIN_START<-BIN_START + 1
}
if (length(BIN_empy)>0){
BIN_extra<-as.data.frame(BIN_empy)
#matrix to add Bins without information
BIM_matrix<-matrix(0,ncol=(dim(CHR)[2] -1), nrow=length(BIN_empy))
BIM_full_matrix<-cbind(BIM_matrix,BIN_extra)
colnames(BIM_full_matrix)<-colnames(CHR)
# Combine bins in SNPs with those that didn't have any SNP
CHR_complete<-rbind(CHR,BIM_full_matrix)
}else{CHR_complete<-CHR}
assign(paste("CHR_",n,"",sep=""),CHR_complete)
}
DATA_w_bins<-rbind(CHR_1,CHR_2,CHR_3,CHR_4,CHR_5,CHR_6,CHR_7)
# Bin marker effects and get the minimum, maximum, and absolute max for each bin
Binned_means_max <- DATA_w_bins %>%
group_by(Chrom_chr, BIN) %>%
summarise_each(funs(max), allele.eff.founder.1:allele.eff.founder.88)
Binned_means_min <- DATA_w_bins %>%
group_by(Chrom_chr, BIN) %>%
summarise_each(funs(min), allele.eff.founder.1:allele.eff.founder.88)
Binned_means_abs <- DATA_w_bins %>%
group_by(Chrom_chr, BIN) %>%
summarise_each(funs(.[which.max(abs(.))]), allele.eff.founder.1:allele.eff.founder.88)
# Make these values numeric so they plot nice
Binned_means_abs$BIN <- as.numeric(Binned_means_abs$BIN)
# Sort data by chromsome and then bin
#Binned_means_sorted <- Binned_means_abs %>%
#arrange(Chrom_chr, BIN)
# Melt into long format for heatmap
melted_QTL_try <- melt(Binned_means_abs, id.vars = c("Chrom_chr", "BIN"))
# Order by family then chrom then bins on each chromsome
melted_QTL_try_ordered <- melted_QTL_try %>%
arrange(variable, Chrom_chr, BIN)
nbins <- nrow(melted_QTL_try_ordered)/88
# Get family number
Fam_num <- apply(melted_QTL_try_ordered, 1, function(x) strsplit(as.character(x), ".")[[1]][1])
Fam_num<-sub("allele.eff.founder.","",  melted_QTL_try_ordered$variable)
head(Fam_num)
melted_QTL_withfam <- cbind(melted_QTL_try_ordered, Fam_num)
# Reorder families by subpopulation and then from earliest parent hd to latest))
parent_heading_sorted <- arrange(parent_heading, man_sort_reverse)
#melted_QTL_withfam$fam_man <- factor(melted_QTL_withfam$Fam_num, levels = c(parent_heading$man_sort_reverse))
arranged_effects <- melted_QTL_withfam %>%
mutate(Fam_num = factor(Fam_num, levels = parent_heading_sorted$new_fam)) %>%
arrange(Fam_num)
# Add subpopulation
# The number of rows in the rep = (the number of families in the subpop)*(the number of bins)
subpopulation_levels <- c(rep("Central European", (17*nbins)), rep("Coastal Mediterranean", (19*nbins)), rep("East African", (8*nbins)), rep("Asian", (19*nbins)), rep("Admixed", (23*nbins)), rep("Unassigned", (2*nbins)))
arranged_effects$subpop <- subpopulation_levels
head(arranged_effects)
# Reorder subpopulations
arranged_effects$subpop_sort = factor(arranged_effects$subpop, levels = c('Central European', 'Coastal Mediterranean', 'East African', 'Asian', 'Admixed', 'Un'))
# Remove chromsomes NA
arranged_effects_noNA <- filter(arranged_effects, Chrom_chr != "NA")
ggplot(data = arranged_effects_noNA, aes(x = BIN, y=factor(Fam_num), fill=value)) +
labs(x = "Chromosome", y = "Family and\nSubpopulation") +
facet_grid(subpop_sort ~ Chrom_chr, scales = "free", space = "free_y", switch = "both") +
scale_fill_gradient2(high = "red3", low = "navy", mid = "white", na.value = "grey", midpoint = 0, guide = "colorbar", "Allele\nEffect\n(Days)", limits = c(-4, 3)) +
geom_tile() +
theme(axis.title.y = element_blank(), strip.text.y = element_blank(), strip.background = element_blank(),
axis.text.x = element_blank(), axis.ticks = element_blank(), panel.border = element_blank(), text = element_text(size = 14),
panel.background = element_rect(color = "white"), panel.grid = element_blank(), legend.text = element_text(size = 14)) +
scale_x_continuous(expand = c(0,0))
ggplot(data = arranged_effects_noNA, aes(x = BIN, y=factor(Fam_num), fill=value)) +
labs(x = "Chromosome", y = "Family and\nSubpopulation") +
facet_grid(subpop_sort ~ Chrom_chr, scales = "free", space = "free_y", switch = "both") +
scale_fill_gradient2(high = "red3", low = "navy", mid = "white", na.value = "grey", midpoint = 0, guide = "colorbar", "Allele\nEffect\n(Days)", limits = c(-4, 3)) +
geom_tile() +
theme(axis.title.y = element_blank(), strip.text.y = element_blank(), strip.background = element_blank(),
axis.text.x = element_blank(), axis.ticks = element_blank(), panel.border = element_blank(), text = element_blank(),
panel.background = element_rect(color = "white"), panel.grid = element_blank(), legend.text = element_text(size = 14)) +
scale_x_continuous(expand = c(0,0))
ggplot(data = arranged_effects_noNA, aes(x = BIN, y=factor(Fam_num), fill=value)) +
labs(x = "Chromosome", y = "Family and\nSubpopulation") +
facet_grid(subpop_sort ~ Chrom_chr, scales = "free", space = "free_y", switch = "both") +
scale_fill_gradient2(high = "red3", low = "navy", mid = "white", na.value = "grey", midpoint = 0, guide = "colorbar", "Allele\nEffect\n(Days)", limits = c(-4, 3)) +
geom_tile() +
theme(axis.title.y = element_blank(), strip.text.y = element_blank(), strip.background = element_blank(),
axis.text.x = element_blank(), axis.ticks = element_blank(), panel.border = element_blank(), text = element_blank(),
panel.background = element_rect(color = "white"), panel.grid = element_blank(), legend.text = element_text(size = 14)) +
scale_x_continuous(expand = c(0,0))
ggplot(data = arranged_effects_noNA, aes(x = BIN, y=factor(Fam_num), fill=value)) +
labs(x = "Chromosome", y = "Family and\nSubpopulation") +
facet_grid(subpop_sort ~ Chrom_chr, scales = "free", space = "free_y", switch = "both") +
scale_fill_gradient2(high = "red3", low = "navy", mid = "white", na.value = "grey", midpoint = 0, guide = "colorbar", "Allele\nEffect\n(Days)", limits = c(-4, 3)) +
geom_tile() +
theme(axis.title.y = element_blank(), strip.text.y = element_blank(), strip.background = element_blank(),
axis.text.x = element_blank(), axis.ticks = element_blank(), panel.border = element_blank(), text = element_text(size = 14),
panel.background = element_rect(color = "white"), panel.grid = element_blank(), legend.text = element_text(size = 14)) +
scale_x_continuous(expand = c(0,0))
ggplot(data = arranged_effects_noNA, aes(x = BIN, y=factor(Fam_num), fill=value)) +
labs(x = "Chromosome", y = "Family and\nSubpopulation") +
facet_grid(subpop_sort ~ Chrom_chr, scales = "free", space = "free_y", switch = "both") +
scale_fill_gradient2(high = "red3", low = "navy", mid = "white", na.value = "grey", midpoint = 0, guide = "colorbar", "Allele\nEffect\n(Days)", limits = c(-4, 3)) +
geom_tile() +
theme(axis.title.y = element_blank(), strip.text.y = element_blank(), strip.background = element_blank(),
axis.text.x = element_blank(), axis.ticks = element_blank(), panel.border = element_blank(), text = element_text(size = 14),
panel.background = element_rect(color = "white"), panel.grid = element_blank(), legend.text = element_text(size = 44)) +
scale_x_continuous(expand = c(0,0))
pdf("~/Documents/SmithLab/NAM/write/Bridgs_edited_files_v2/Figures/Figure3b.pdf",height=3,width=11)
ggplot(data = arranged_effects_noNA, aes(x = BIN, y=factor(Fam_num), fill=value)) +
labs(x = "Chromosome", y = "Family and\nSubpopulation") +
facet_grid(subpop_sort ~ Chrom_chr, scales = "free", space = "free_y", switch = "both") +
scale_fill_gradient2(high = "red3", low = "navy", mid = "white", na.value = "grey", midpoint = 0, guide = "colorbar", "Allele\nEffect\n(Days)", limits = c(-4, 3)) +
geom_tile() +
theme(axis.title.y = element_blank(), strip.text.y = element_blank(), strip.background = element_blank(),
axis.text.x = element_blank(), axis.ticks = element_blank(), panel.border = element_blank(), text = element_text(size = 14),
panel.background = element_rect(color = "white"), panel.grid = element_blank(), legend.text = element_text(size = 14)) +
scale_x_continuous(expand = c(0,0))
dev.off()
pdf("~/Documents/SmithLab/NAM/write/Bridgs_edited_files_v2/Figures/Figure3b.pdf",height=9,width=11)
ggplot(data = arranged_effects_noNA, aes(x = BIN, y=factor(Fam_num), fill=value)) +
labs(x = "Chromosome", y = "Family and\nSubpopulation") +
facet_grid(subpop_sort ~ Chrom_chr, scales = "free", space = "free_y", switch = "both") +
scale_fill_gradient2(high = "red3", low = "navy", mid = "white", na.value = "grey", midpoint = 0, guide = "colorbar", "Allele\nEffect\n(Days)", limits = c(-4, 3)) +
geom_tile() +
theme(axis.title.y = element_blank(), strip.text.y = element_blank(), strip.background = element_blank(),
axis.text.x = element_blank(), axis.ticks = element_blank(), panel.border = element_blank(), text = element_text(size = 14),
panel.background = element_rect(color = "white"), panel.grid = element_blank(), legend.text = element_text(size = 14)) +
scale_x_continuous(expand = c(0,0))
dev.off()
library(stringr)
#===Bin chromosomes and estimate mean allele frequency of donor parent ===================================================================
# =========== Calculate the proportion of Rasmusson allele (1- donor allele freq ) in windows of ... SNPs =====================================
# Import table of frequency of donor allele
DATA<-read.table("/home/agonzale/Downloads/88Fam_genmap_SNPdonorgenotypeFreqAA.txt", header=T, row.names=1 )
CHR1<-DATA[grep("1H", row.names(DATA)),]
CHR2<-DATA[grep("2H", row.names(DATA)),]
CHR3<-DATA[grep("3H", row.names(DATA)),]
CHR4<-DATA[grep("4H", row.names(DATA)),]
CHR5<-DATA[grep("5H", row.names(DATA)),]
CHR6<-DATA[grep("6H", row.names(DATA)),]
CHR7<-DATA[grep("7H", row.names(DATA)),]
CHR_UN<-DATA[grep("UN", row.names(DATA)),]
# Find the positions of SNPs at the begining of 100 snp segments
RESULTS_mean<-matrix(NA, ncol=dim(DATA)[2])
colnames(RESULTS_mean)<-colnames(DATA)
CHRnames<-c("CHR1", "CHR2", "CHR3", "CHR4", "CHR5", "CHR6", "CHR7") # ignore the UNknown chrosmosome since we cannot group it by physical proximity
# Function to calculate the mean, setting it to NA if there are not values in that segment
GetMean<-function(dat){
if (length(which(is.na(dat))) == length(dat)){mean_value<-NA}
mean_value<-mean(dat[which(!is.na(dat))])
return(mean_value)
}
for (n in 1:length(CHRnames)){
print (n)
# Devide each chromosome in 200 parts and get the average frequency of donor allele for that segment
CHR_X<-get(CHRnames[n])
# number of SNPs per segment to get 200 segments
SNPsPerSegment<-round(dim(CHR_X)[1]/200, digits=0)
# Total posible segments
dim(CHR_X)[1]/SNPsPerSegment
TotalSegments<-round(dim(CHR_X)[1]/SNPsPerSegment)
EndPosition<-seq(TotalSegments , dim(CHR_X)[1], by= SNPsPerSegment)
# if the last position is less than the SNPsperSegment from the end of the chromosome, change the position to be the end of the chromosome
if ((dim(CHR_X)[1]  - EndPosition[length(EndPosition)]) <SNPsPerSegment) {EndPosition[length(EndPosition)]<-(dim(CHR_X)[1])}
start<-1
for (s in 1: length(EndPosition)){
#print (s)
start<-start
end<-EndPosition[s]
SEGMENT<-CHR_X[start:end,]
#MEAN<-as.data.frame(t(apply(SEGMENT, 2, summary)[4,]))
MEAN<-as.data.frame(t(apply(SEGMENT , 2, GetMean)))
#row.names(MEAN)<-paste(CHRnames[n], "_", s, sep="")
row.names(MEAN)<-paste(CHRnames[n], "_", str_pad(s, 4, pad = "0"), sep="")
# add values to our Results table
#if (s==1){RESULTS_mean[s,]<-MEAN}else{RESULTS_mean<-rbind(RESULTS_mean, (MEAN))}
RESULTS_mean<-rbind(RESULTS_mean, (MEAN))
start<-(end+1)
}
}
head(RESULTS_mean)
paste(CHRnames[n], "_", str_pad(s, 4, pad = "0"), sep="")
bin_info_total<-matrix(NA,ncol=3)
colnames(bin_info_total)<-c("bin_name","start","end")
for (n in 1:length(CHRnames)){
print (n)
# Devide each chromosome in 200 parts and get the average frequency of donor allele for that segment
CHR_X<-get(CHRnames[n])
# number of SNPs per segment to get 200 segments
SNPsPerSegment<-round(dim(CHR_X)[1]/200, digits=0)
# Total posible segments
dim(CHR_X)[1]/SNPsPerSegment
TotalSegments<-round(dim(CHR_X)[1]/SNPsPerSegment)
EndPosition<-seq(TotalSegments , dim(CHR_X)[1], by= SNPsPerSegment)
# if the last position is less than the SNPsperSegment from the end of the chromosome, change the position to be the end of the chromosome
if ((dim(CHR_X)[1]  - EndPosition[length(EndPosition)]) <SNPsPerSegment) {EndPosition[length(EndPosition)]<-(dim(CHR_X)[1])}
start<-1
for (s in 1: length(EndPosition)){
#print (s)
start<-start
end<-EndPosition[s]
SEGMENT<-CHR_X[start:end,]
#MEAN<-as.data.frame(t(apply(SEGMENT, 2, summary)[4,]))
MEAN<-as.data.frame(t(apply(SEGMENT , 2, GetMean)))
#row.names(MEAN)<-paste(CHRnames[n], "_", s, sep="")
row.names(MEAN)<-paste(CHRnames[n], "_", str_pad(s, 4, pad = "0"), sep="")
bin_info<-data.frame(bin_name = paste(CHRnames[n], "_", str_pad(s, 4, pad = "0"), sep=""), start=start ,end=end)
bin_info_total<-rbind(bin_info_total,bin_info)
# add values to our Results table
#if (s==1){RESULTS_mean[s,]<-MEAN}else{RESULTS_mean<-rbind(RESULTS_mean, (MEAN))}
RESULTS_mean<-rbind(RESULTS_mean, (MEAN))
start<-(end+1)
}
}
bin_info_total
CHR1<-DATA[grep("1H", row.names(DATA)),]
CHR2<-DATA[grep("2H", row.names(DATA)),]
CHR3<-DATA[grep("3H", row.names(DATA)),]
CHR4<-DATA[grep("4H", row.names(DATA)),]
CHR5<-DATA[grep("5H", row.names(DATA)),]
CHR6<-DATA[grep("6H", row.names(DATA)),]
CHR7<-DATA[grep("7H", row.names(DATA)),]
CHR_UN<-DATA[grep("UN", row.names(DATA)),]
# Find the positions of SNPs at the begining of 100 snp segments
RESULTS_mean<-matrix(NA, ncol=dim(DATA)[2])
colnames(RESULTS_mean)<-colnames(DATA)
bin_info_total<-matrix(NA,ncol=3)
colnames(bin_info_total)<-c("bin_name","start","end")
CHRnames<-c("CHR1", "CHR2", "CHR3", "CHR4", "CHR5", "CHR6", "CHR7") # ignore the UNknown chrosmosome since we cannot group it by physical proximity
# Function to calculate the mean, setting it to NA if there are not values in that segment
GetMean<-function(dat){
if (length(which(is.na(dat))) == length(dat)){mean_value<-NA}
mean_value<-mean(dat[which(!is.na(dat))])
return(mean_value)
}
for (n in 1:length(CHRnames)){
print (n)
# Devide each chromosome in 200 parts and get the average frequency of donor allele for that segment
CHR_X<-get(CHRnames[n])
# number of SNPs per segment to get 200 segments
SNPsPerSegment<-round(dim(CHR_X)[1]/200, digits=0)
# Total posible segments
dim(CHR_X)[1]/SNPsPerSegment
TotalSegments<-round(dim(CHR_X)[1]/SNPsPerSegment)
EndPosition<-seq(TotalSegments , dim(CHR_X)[1], by= SNPsPerSegment)
# if the last position is less than the SNPsperSegment from the end of the chromosome, change the position to be the end of the chromosome
if ((dim(CHR_X)[1]  - EndPosition[length(EndPosition)]) <SNPsPerSegment) {EndPosition[length(EndPosition)]<-(dim(CHR_X)[1])}
start<-1
for (s in 1: length(EndPosition)){
#print (s)
start<-start
end<-EndPosition[s]
SEGMENT<-CHR_X[start:end,]
#MEAN<-as.data.frame(t(apply(SEGMENT, 2, summary)[4,]))
MEAN<-as.data.frame(t(apply(SEGMENT , 2, GetMean)))
#row.names(MEAN)<-paste(CHRnames[n], "_", s, sep="")
row.names(MEAN)<-paste(CHRnames[n], "_", str_pad(s, 4, pad = "0"), sep="")
bin_info<-data.frame(bin_name = paste(CHRnames[n], "_", str_pad(s, 4, pad = "0"), sep=""), start=start ,end=end)
bin_info_total<-rbind(bin_info_total,bin_info)
# add values to our Results table
#if (s==1){RESULTS_mean[s,]<-MEAN}else{RESULTS_mean<-rbind(RESULTS_mean, (MEAN))}
RESULTS_mean<-rbind(RESULTS_mean, (MEAN))
start<-(end+1)
}
}
head(bin_info_total)
head(bin_info_total[grep("CHR2",bin_info_total[,1]),])
bin_info_total<-bin_info_total[-1,]
dim(bin_info_total[grep("CHR2",bin_info_total[,1]),])
write.table(bin_info_total, "~/Desktop/88Fam_genmap_segDist_binned_AA_BINinfo.txt", quote=F,row.names=T,col.names=T,sep="\t")
write.table(bin_info_total, "~/Desktop/88Fam_genmap_segDist_binned_AA_BINinfo.txt", quote=F,row.names=F,col.names=T,sep="\t")
tail(bin_info_total[grep("CHR1",bin_info_total[,1]),])
SEGMENT
SEGMENT[1:4,1:5]
row.names(SEGMENT)[dim(SEGMENT)[1]]
row.names(SEGMENT)[1]
# Find the positions of SNPs at the begining of 100 snp segments
RESULTS_mean<-matrix(NA, ncol=dim(DATA)[2])
colnames(RESULTS_mean)<-colnames(DATA)
bin_info_total<-matrix(NA,ncol=3)
colnames(bin_info_total)<-c("bin_name","start","end")
CHRnames<-c("CHR1", "CHR2", "CHR3", "CHR4", "CHR5", "CHR6", "CHR7") # ignore the UNknown chrosmosome since we cannot group it by physical proximity
# Function to calculate the mean, setting it to NA if there are not values in that segment
GetMean<-function(dat){
if (length(which(is.na(dat))) == length(dat)){mean_value<-NA}
mean_value<-mean(dat[which(!is.na(dat))])
return(mean_value)
}
for (n in 1:length(CHRnames)){
print (n)
# Devide each chromosome in 200 parts and get the average frequency of donor allele for that segment
CHR_X<-get(CHRnames[n])
# number of SNPs per segment to get 200 segments
SNPsPerSegment<-round(dim(CHR_X)[1]/200, digits=0)
# Total posible segments
dim(CHR_X)[1]/SNPsPerSegment
TotalSegments<-round(dim(CHR_X)[1]/SNPsPerSegment)
EndPosition<-seq(TotalSegments , dim(CHR_X)[1], by= SNPsPerSegment)
# if the last position is less than the SNPsperSegment from the end of the chromosome, change the position to be the end of the chromosome
if ((dim(CHR_X)[1]  - EndPosition[length(EndPosition)]) <SNPsPerSegment) {EndPosition[length(EndPosition)]<-(dim(CHR_X)[1])}
start<-1
for (s in 1: length(EndPosition)){
#print (s)
start<-start
end<-EndPosition[s]
SEGMENT<-CHR_X[start:end,]
#MEAN<-as.data.frame(t(apply(SEGMENT, 2, summary)[4,]))
MEAN<-as.data.frame(t(apply(SEGMENT , 2, GetMean)))
#row.names(MEAN)<-paste(CHRnames[n], "_", s, sep="")
row.names(MEAN)<-paste(CHRnames[n], "_", str_pad(s, 4, pad = "0"), sep="")
bin_info<-data.frame(bin_name = paste(CHRnames[n], "_", str_pad(s, 4, pad = "0"), sep=""), start=row.names(SEGMENT)[1] ,end=row.names(SEGMENT)[dim(SEGMENT)[1]])
bin_info_total<-rbind(bin_info_total,bin_info)
# add values to our Results table
#if (s==1){RESULTS_mean[s,]<-MEAN}else{RESULTS_mean<-rbind(RESULTS_mean, (MEAN))}
RESULTS_mean<-rbind(RESULTS_mean, (MEAN))
start<-(end+1)
}
}
#
RESULTS_mean<-RESULTS_mean[-1,]
bin_info_total<-bin_info_total[-1,]
head(bin_info_total)
write.table(bin_info_total, "~/Desktop/88Fam_genmap_segDist_binned_AA_BINinfo.txt", quote=F,row.names=F,col.names=T,sep="\t")
30/184
1473-2780
#Author: Ana Poets
# Description: Estimate SFS in the RILs BRIDG6 and within each family
#################################################################################################
rm(list=)
#Author: Ana Poets
# Description: Estimate SFS in the RILs BRIDG6 and within each family
#################################################################################################
rm(list=ls())
# Plot SFS across all RILs
tableMinCount<-read.table("/Users/Mia/Dropbox/SmithLab/NAM/Analysis/SFS_Bridg6/output/SFS_count_bridg6.txt",header=T)
head(tableMinCount)
hist(tableMinCount)
hist(tableMinCount[,2])
barplot(tableMinCount[,2])
summary(tableMinCount[,2])
plot(tableMinCount[,1],tableMinCount[,2])
plot(tableMinCount[,1],tableMinCount[,2],cex=0.2)
summary(tableMinCount[,1])
plot(tableMinCount[,1],tableMinCount[,2],cex=0.2, xlim=c(1,5141))
hist(tableMinCount[,2])
plot(tableMinCount[,1],tableMinCount[,2],cex=0.2, xlim=c(1,5141))
head()
head(tableMinCount)
sum(tableMinCount[,2])
summary(tableMinCount[,2])
hist(tableMinCount[,2])
hist(tableMinCount[,1])
100+200+300+400+500
head(tableMinCount)
x<-tableMinCount[which(tableMinCount[,1] <=500),]
dim(x)
x<-tableMinCount[which(tableMinCount[,1] >500 & tableMinCount[,1] <=1000),]
dim(x)
sum(tableMinCount[,1])
dim(tableMinCount)
sum(x[,2])
sum(tableMinCount[,2])
3224/8102
x<-tableMinCount[which(tableMinCount[,1] <=500),]
freqX<-sum(x[,2])/sum(tableMinCount[,2])
freqX
freqX<-(sum(x[,2])/sum(tableMinCount[,2]))*100
freqX
# for windows of 100 count (classes)
i=1
n = 99
x<-tableMinCount[which(tableMinCount[,1] >=i & tableMinCount[,1] < (i+n)),]
dim(x = )
dim(x)
freqX<-(sum(x[,2])/sum(tableMinCount[,2]))*100
freqX
dim(x)
Results<-data.frame("Start"=NA,"End"= NA,"freq"=NA)
i=1
n = 99
Results<-data.frame("Start"=NA,"End"= NA,"freq"=NA)
Results<-data.frame("Start"=NA,"End"= NA,"freq"=NA)
while (i < 5500){
x<-tableMinCount[which(tableMinCount[,1] >=i & tableMinCount[,1] < (i+n)),]
if (dim(x)[1] == 0){
freqX = 0
}else{
freqX<-(sum(x[,2])/sum(tableMinCount[,2]))*100}
temp<-data.frame("Start"=i,"End"= (i+n),"freq"=freqX)
Results<-rbind(Results,temp)
i= (i+n)
}
head(Results)
Results<-Results[-1,]
head(Results)
plot(Results[,1],Results[,2])
plot(Results[,2],Results[,3])
summary(Results[,3])
plot(Results[,2],Results[,3],xlim=c(1,5500))
plot(Results[,2],Results[,3]/100,xlim=c(1,5500))
plot(Results[,2],Results[,3]/100,xlim=c(1,6000))
plot(Results[,2],Results[,3]/100,xlim=c(1,6000),yaxis=c(0.01,0.10))
plot(Results[,2],Results[,3]/100,xlim=c(1,6000),ylim=c(0.01,0.10))
summary(Results[,3])
plot(Results[,2],Results[,3]/100,xlim=c(1,6000),ylim=c(0.001,0.10))
8101*0.001
plot(Results[,2],Results[,3]/100,xlim=c(1,6000),ylim=c(0.001,0.10), ylab="Percentage",xlim="Allele class")
plot(Results[,2],Results[,3]/100,xlim=c(1,6000),ylim=c(0.001,0.10), ylab="Percentage",xlab="Allele class")
# Load genotypic data (same used for GWAS)
# ref allele = 2 = major allele
# 0 = minor allele, this allows minor alleles to have different effects if stratification is provided
# SNPs are in columns 8,101. Samples are in rows(5,141)
gen = read.csv("/home/smithkp/agonzale/Projects/NAM/Analysis/Imputation/Imputed_May/GWAS_imp_pri/LDKNNI/Input/genos_LDKNNI.csv")
a='admixed'
tableMinCount<-read.table(paste("/Users/Mia/Dropbox/SmithLab/NAM/Analysis/SFS_Bridg6/output/SFS_count_",a,".txt",sep=""),header=T)
paste("/Users/Mia/Dropbox/SmithLab/NAM/Analysis/SFS_Bridg6/output/SFS_count_",a,".txt",sep="")
tableMinCount<-read.table(paste("/Users/Mia/Dropbox/SmithLab/NAM/Analysis/SFS_Bridg6/output/SFS_count_",a,"_hap.txt",sep=""),header=T)
plot(tableMinCount[,1],tableMinCount[,2],cex=0.2
)
dim(tableMinCount)
head(tableMinCount)
sum(tableMinCount[,2])
sum(tableMinCount[,1])
