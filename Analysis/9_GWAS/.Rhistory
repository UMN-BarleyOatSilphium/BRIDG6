CumPos_start<-Annotations_chr[grep(paste(c,"H",sep=""), Annotations_chr$Gene_Ch), 5] + CHROM_length[c]
Annotations_chr[grep(paste(c,"H",sep=""), Annotations_chr$Gene_Ch),"Cumul_posStart"]<-CumPos_start
#cumul end
CumPos_end<-Annotations_chr[grep(paste(c,"H",sep=""), Annotations_chr$Gene_Ch), 6] + CHROM_length[c]
Annotations_chr[grep(paste(c,"H",sep=""), Annotations_chr$Gene_Ch),"Cumul_posEnd"]<-CumPos_end
#cumul mid point
CumPos_mid<-Annotations_chr[grep(paste(c,"H",sep=""), Annotations_chr$Gene_Ch), 7] + CHROM_length[c]
Annotations_chr[grep(paste(c,"H",sep=""), Annotations_chr$Gene_Ch),"Cumul_posMid"]<-CumPos_mid
}
# Summary annotations
Annotations_genes<-Annotations_chr[!is.na(Annotations_chr$Cumul_posStart),c(1,2,4,16,17,18)]
# Plot results
par(mar=c(7,4,4,4))
plot(GenomeWide_QTLassigned$Cumul_Pos/1000000, GenomeWide_QTLassigned$pval, cex=0.6, ylab="-lob(p-value)",xlab="Physical Position (Mbp)",xaxt="n")
abline(h=THR, col="red")
# Color each QTL identified with a different color
UNIQ_QTL<-unique(GenomeWide_QTLassigned[which(!is.na(GenomeWide_QTLassigned[,2])),2])
# create nQTL colors
palette(rainbow(length(UNIQ_QTL)))
COLORS<-(palette(gray(seq(0,.9,len = 25))))
# paint each QTL with a different color
for (p in 1:length(UNIQ_QTL)){
QTLpoints<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned[,2] == UNIQ_QTL[p]),]
points(QTLpoints$Cumul_Pos/1000000, QTLpoints$pval, cex=0.6, col=COLORS[p])
}
# Set chromosome boundaries
abline(v=c(558535432,1326610456,2026321570,2673381728,3343411888,3926792401)/1000000, col="gray", lty=2)
print(paste("Total number of QTL:",length(UNIQ_QTL), sep=" "))
# add the position of known genes associated with flowering time
axis(side=1, at=c(Annotations_genes$Cumul_posMid/1000000), labels = FALSE)
text(x=c(Annotations_genes$Cumul_posMid/1000000),  par("usr")[3],
labels = Annotations_genes$Abrevation, srt = 90, xpd = T, cex=0.5)
THR =  -log10(0.05 / ( nrow(GenomeWide_QTLassigned) * (1-0.05)))
SIG<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned$pval >= THR),c(((dim(GenomeWide_QTLassigned)[2])-87):dim(GenomeWide_QTLassigned)[2])]
SEG_Fam<-NULL
for(s in 1:dim(SIG)[1]){
SEG_Fam<-c(SEG_Fam,length(which(SIG[s,] != 0)))
}
SIGqtl<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned$pval >= THR),c(2,((dim(GenomeWide_QTLassigned)[2])-87):dim(GenomeWide_QTLassigned)[2])]
QTL_all_sig<-names(table(SIGqtl[,1]))
QTLsegFamMin<-matrix(NA,ncol=2,nrow=length(QTL_all_sig))
for (q in 1:length(QTL_all_sig)){
EFFECTS<-SIGqtl[which(SIGqtl[,1] == QTL_all_sig[q]),]
SEG_Fam_qtl<-NULL
for(s in 1:dim(EFFECTS)[1]){
SEG_Fam_qtl<-c(SEG_Fam_qtl,length(which(EFFECTS[s,-1] != 0)))
}
QTLsegFamMin[q,1]<-QTL_all_sig[q]
QTLsegFamMin[q,2]<-min(SEG_Fam_qtl)
}
summary(as.numeric(as.matrix(QTLsegFamMin[,2])))
SIGqtl_size<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned$pval >= THR),c(1:2)]
INTERVAL<-matrix(NA,ncol=2,nrow=length(QTL_all_sig))
for (q in 1:length(QTL_all_sig)){
SNPinQTL<-SIGqtl_size[which(SIGqtl_size[,2]== QTL_all_sig[q]),]
start_pos<-SNPinQTL[1,1]
end_pos<-SNPinQTL[dim(SNPinQTL)[1],1]
interval<-end_pos-start_pos
INTERVAL[q,1]<-QTL_all_sig[q]
INTERVAL[q,2]<-interval
}
INTERVAL[which(INTERVAL[,2]==0),2]<-c("5000000")
summary(as.numeric(as.matrix(INTERVAL[,2])))
SIGqtl<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned$pval >= THR),c(((dim(GenomeWide_QTLassigned)[2])-87):dim(GenomeWide_QTLassigned)[2])]
dim()
dim(SIGqtl)
SIGqtl[1:10,1:6]
INTERVAL
dim(QTL_all_sig)
length()
length(QTL_all_sig)
QTL_all_sig
QTL_all_sig
QTLsummary<-matrix(NA,ncol=2, nrow=length(QTL_all_sig))
row.names(QTLsummary)<-QTL_all_sig
colnames(QTLsummary)<-c("start","End")
z<-1
GenomeWide_QTLassigned[which(GenomeWide_QTLassigned$QTL_assig == QTL_all_sig[z]),1]
DISTANCE<-5000000
QTLsummary<-matrix(NA,ncol=2, nrow=length(QTL_all_sig))
row.names(QTLsummary)<-QTL_all_sig
colnames(QTLsummary)<-c("start","End")
for (z in 1:length(QTL_all_sig)){
QTL_snps<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned$QTL_assig == QTL_all_sig[z]),1]
if(length(QTL_snps) >0){
QTLsummary[z,1]<-QTL_snps[1] - DISTANCE
QTLsummary[z,2]<-QTL_snps[length(QTL_snps)]+ DISTANCE
}else{QTLsummary[z,1] <-QTL_snps[1] ; QTLsummary[z,2] <-QTL_snps[1] }
}
DISTANCE<-3000000
QTL_region<-5000000
QTLsummary<-matrix(NA,ncol=2, nrow=length(QTL_all_sig))
row.names(QTLsummary)<-QTL_all_sig
colnames(QTLsummary)<-c("start","End")
for (z in 1:length(QTL_all_sig)){
QTL_snps<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned$QTL_assig == QTL_all_sig[z]),1]
if(length(QTL_snps) >0){
QTLsummary[z,1]<-QTL_snps[1] - QTL_region
QTLsummary[z,2]<-QTL_snps[length(QTL_snps)]+ QTL_region
}else{QTLsummary[z,1] <-QTL_snps[1] ; QTLsummary[z,2] <-QTL_snps[1] }
}
DISTANCE<-3000000
Table_SNPnearest<-matrix(NA,nrow=1,ncol=10)
colnames(Table_SNPnearest)<-c("QTL","SNP","SNP -log(p)","QTL -log(p)","Nearest candidate gene","Distance to SNP","Chromosome","Minimum allele Effect","Maximum allele effect","Segregating Families")
for (k in 1:dim(QTLsummary)[1]){
k<-7
GENE<-Annotations_genes[which(Annotations_genes$Cumul_posMid >= (QTLsummary[k,"start"]- DISTANCE) & Annotations_genes$Cumul_posMid <= (QTLsummary[k,"End"] + DISTANCE)),]
GENE
#find the SNP closest to each of the found genes
if(dim(GENE)[1]>0){
for (g in 1:dim(GENE)[1]){
print (g)
SNPnearest<-(GenomeWide_QTLassigned[which(abs(GenomeWide_QTLassigned[,1]-GENE[g,6])==min(abs(GenomeWide_QTLassigned[,1]-GENE[g,6]))),])
# QTLname
#QTLpresent<-(GenomeWide_QTLassigned[which(abs(GenomeWide_QTLassigned[,1]-GENE[1,6])==min(abs(GenomeWide_QTLassigned[,1]-GENE[1,6]))),2])
QTLpresent<-row.names(QTLsummary)[k]
#Maximum lod score for any SNP in the QTL
QTLinfo<-GenomeWide_QTLassigned[grep(QTLpresent, GenomeWide_QTLassigned$QTL_assig),]
MAXLOD<-max(QTLinfo$pval)
#LOD score for nearest SNP
SNP_LOD<-SNPnearest$pval
#how close is the SNP to the mid point of the gene
DISTANCE<-abs(GenomeWide_QTLassigned[,1]-GENE[g,6])[which(abs(GenomeWide_QTLassigned[,1]-GENE[g,6])==min(abs(GenomeWide_QTLassigned[,1]-GENE[g,6])))]
#Abbreviation nearest gene
NEAREST_GENE<-GENE[g,2]
#chromosome. Keep the information from the first SNP in the QTL
CHR<-GENE[1,3]
# number of SNPs in QTL region
SNP_region<-dim(QTLinfo)[1]
# minumul allele effect for the SNP
MIN_alleleEff<-min(SNPnearest[,c((dim(SNPnearest)[2] - 87):dim(SNPnearest)[2])])
MAX_alleleEff<-max(SNPnearest[,c((dim(SNPnearest)[2] - 87):dim(SNPnearest)[2])])
# number of families segregating for the allele
NumFAM_SEG<-length(which(SNPnearest[,c((dim(SNPnearest)[2] - 87):dim(SNPnearest)[2])] != 0))
#construct table
Table_part<-data.frame(QTLpresent,row.names(SNPnearest), SNP_LOD,MAXLOD,NEAREST_GENE,round(DISTANCE/1000000,digits=3),CHR,MIN_alleleEff, MAX_alleleEff, NumFAM_SEG )
names(Table_part)<-c("QTL","SNP","SNP -log(p)","QTL -log(p)","Nearest candidate gene","Distance to SNP","Chromosome","Minimum allele Effect","Maximum allele effect","Segregating Families")
Table_SNPnearest<-rbind(Table_SNPnearest,Table_part)
}
}
#print (paste( row.names(QTLsummary)[k], ":" ,as.character(GENE)))
}
Table_SNPnearest
Table_SNPnearest<-matrix(NA,nrow=1,ncol=10)
colnames(Table_SNPnearest)<-c("QTL","SNP","SNP -log(p)","QTL -log(p)","Nearest candidate gene","Distance to SNP","Chromosome","Minimum allele Effect","Maximum allele effect","Segregating Families")
for (k in 1:dim(QTLsummary)[1]){
GENE<-Annotations_genes[which(Annotations_genes$Cumul_posMid >= (QTLsummary[k,"start"]- DISTANCE) & Annotations_genes$Cumul_posMid <= (QTLsummary[k,"End"] + DISTANCE)),]
#find the SNP closest to each of the found genes
if(dim(GENE)[1]>0){
for (g in 1:dim(GENE)[1]){
print (g)
SNPnearest<-(GenomeWide_QTLassigned[which(abs(GenomeWide_QTLassigned[,1]-GENE[g,6])==min(abs(GenomeWide_QTLassigned[,1]-GENE[g,6]))),])
# QTLname
#QTLpresent<-(GenomeWide_QTLassigned[which(abs(GenomeWide_QTLassigned[,1]-GENE[1,6])==min(abs(GenomeWide_QTLassigned[,1]-GENE[1,6]))),2])
QTLpresent<-row.names(QTLsummary)[k]
#Maximum lod score for any SNP in the QTL
QTLinfo<-GenomeWide_QTLassigned[grep(QTLpresent, GenomeWide_QTLassigned$QTL_assig),]
MAXLOD<-max(QTLinfo$pval)
#LOD score for nearest SNP
SNP_LOD<-SNPnearest$pval
#how close is the SNP to the mid point of the gene
DISTANCE<-abs(GenomeWide_QTLassigned[,1]-GENE[g,6])[which(abs(GenomeWide_QTLassigned[,1]-GENE[g,6])==min(abs(GenomeWide_QTLassigned[,1]-GENE[g,6])))]
#Abbreviation nearest gene
NEAREST_GENE<-GENE[g,2]
#chromosome. Keep the information from the first SNP in the QTL
CHR<-GENE[1,3]
# number of SNPs in QTL region
SNP_region<-dim(QTLinfo)[1]
# minumul allele effect for the SNP
MIN_alleleEff<-min(SNPnearest[,c((dim(SNPnearest)[2] - 87):dim(SNPnearest)[2])])
MAX_alleleEff<-max(SNPnearest[,c((dim(SNPnearest)[2] - 87):dim(SNPnearest)[2])])
# number of families segregating for the allele
NumFAM_SEG<-length(which(SNPnearest[,c((dim(SNPnearest)[2] - 87):dim(SNPnearest)[2])] != 0))
#construct table
Table_part<-data.frame(QTLpresent,row.names(SNPnearest), SNP_LOD,MAXLOD,NEAREST_GENE,round(DISTANCE/1000000,digits=3),CHR,MIN_alleleEff, MAX_alleleEff, NumFAM_SEG )
names(Table_part)<-c("QTL","SNP","SNP -log(p)","QTL -log(p)","Nearest candidate gene","Distance to SNP","Chromosome","Minimum allele Effect","Maximum allele effect","Segregating Families")
Table_SNPnearest<-rbind(Table_SNPnearest,Table_part)
}
}
#print (paste( row.names(QTLsummary)[k], ":" ,as.character(GENE)))
}
Table_SNPnearest
par(mar=c(7,4,4,4))
plot(GenomeWide_QTLassigned$Cumul_Pos/1000000, GenomeWide_QTLassigned$pval, cex=0.6, ylab="-lob(p-value)",xlab="Physical Position (Mbp)",xaxt="n")
abline(h=THR, col="red")
UNIQ_QTL<-unique(GenomeWide_QTLassigned[which(!is.na(GenomeWide_QTLassigned[,2])),2])
palette(rainbow(length(UNIQ_QTL)))
COLORS<-(palette(gray(seq(0,.9,len = 25))))
for (p in 1:length(UNIQ_QTL)){
QTLpoints<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned[,2] == UNIQ_QTL[p]),]
points(QTLpoints$Cumul_Pos/1000000, QTLpoints$pval, cex=0.6, col=COLORS[p])
}
abline(v=c(558535432,1326610456,2026321570,2673381728,3343411888,3926792401)/1000000, col="gray", lty=2)
Table_SNPnearest
GenomeWide_QTLassigned[1:5,1:5]
qtlselect<-GenomeWide_QTLassigned[(row.names(GenomeWide_QTLassigned) %in% Table_SNPnearest$SNP),]
qtlselect<-GenomeWide_QTLassigned[(row.names(GenomeWide_QTLassigned) %in% Table_SNPnearest$SNP),1]
qtlselect
Table_SNPnearest<-Table_SNPnearest[-1,]
text(x=c(Annotations_genes$Cumul_posMid/1000000),  par("usr")[3],
labels = Table_SNPnearest[,5], srt = 90, xpd = T, cex=0.5)
abline()
par(mar=c(7,4,4,4))
plot(GenomeWide_QTLassigned$Cumul_Pos/1000000, GenomeWide_QTLassigned$pval, cex=0.6, ylab="-lob(p-value)",xlab="Physical Position (Mbp)",xaxt="n")
abline(h=THR, col="red")
UNIQ_QTL<-unique(GenomeWide_QTLassigned[which(!is.na(GenomeWide_QTLassigned[,2])),2])
palette(rainbow(length(UNIQ_QTL)))
COLORS<-(palette(gray(seq(0,.9,len = 25))))
for (p in 1:length(UNIQ_QTL)){
QTLpoints<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned[,2] == UNIQ_QTL[p]),]
points(QTLpoints$Cumul_Pos/1000000, QTLpoints$pval, cex=0.6, col=COLORS[p])
}
abline(v=c(558535432,1326610456,2026321570,2673381728,3343411888,3926792401)/1000000, col="gray", lty=2)
print(paste("Total number of QTL:",length(UNIQ_QTL), sep=" "))
qtlselect/1000000
axis(side=1, at=c(qtlselect/1000000), labels = FALSE)
text(x=c(qtlselect/1000000),  par("usr")[3],
labels = Table_SNPnearest[,5], srt = 90, xpd = T, cex=0.5)
Annotations
Annotations$Abrevation
Annotions[43,]
Annotations[43,]
Annotations[44,]
Annotations[40,]
which(Annotations$Abrevation == "Vrn-H1 ")
which(Annotations$Abrevation == "Vrn-H1")
Annotations[46,]
599127174 599131915 599129544
QTLinfo
599127174 599131915 599129544
QTLsummary
abline(c(599127174/1000000))
abline(v=c(599127174/1000000))
head(Annotations_genes)
Annotations_genes
abline(v=c(3272508902/1000000))
3294346625 -3272513643
21832982/1000000
3073267583   3073268865   3073268224
QTLsummary[grep("5H",QTLsummary[,1]),]
QTLsummary[grep("5H",row.name(QTLsummary[,1])),]
head(QTLsummary)
QTLsummary[grep("5_",row.names(QTLsummary)),]
Table_SNPnearest
write.table(Table_SNPnearest,"/Users/agonzale/Dropbox/SmithLab/NAM/write/Bridge_edited_files_v2/Tables/Table2_2_Ana_qtlFloweringTime.xls",quote=F,row.names=F,col.names=T,sep="\t")
write.table(Table_SNPnearest,"/Users/agonzale/Documents/SmithLab/NAM/write/Bridgs_edited_files_v2/Tables/Table2_SNPqtlFloweringTime.txt",quote=F,row.names=F,col.names=T,sep="\t")
par(mar=c(7,4,4,4))
plot(GenomeWide_QTLassigned$Cumul_Pos/1000000, GenomeWide_QTLassigned$pval, cex=0.6, ylab="-lob(p-value)",xlab="Physical Position (Mbp)",xaxt="n")
abline(h=THR, col="red")
# Color each QTL identified with a different color
UNIQ_QTL<-unique(GenomeWide_QTLassigned[which(!is.na(GenomeWide_QTLassigned[,2])),2])
# create nQTL colors
palette(rainbow(length(UNIQ_QTL)))
COLORS<-(palette(gray(seq(0,.9,len = 25))))
# paint each QTL with a different color
for (p in 1:length(UNIQ_QTL)){
QTLpoints<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned[,2] == UNIQ_QTL[p]),]
points(QTLpoints$Cumul_Pos/1000000, QTLpoints$pval, cex=0.6, col=COLORS[p])
}
# Set chromosome boundaries
abline(v=c(558535432,1326610456,2026321570,2673381728,3343411888,3926792401)/1000000, col="gray", lty=2)
print(paste("Total number of QTL:",length(UNIQ_QTL), sep=" "))
length(COLORS)
rep(c("blue","red"),2)
COLORS<-rep(c("blue","red"), 12)
for (p in 1:length(UNIQ_QTL)){
QTLpoints<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned[,2] == UNIQ_QTL[p]),]
points(QTLpoints$Cumul_Pos/1000000, QTLpoints$pval, cex=0.6, col=COLORS[p])
}
pdf("/Users/agonzale/Documents/SmithLab/NAM/write/Bridgs_edited_files_v2/ExtraFigs/GWAS_Genes.pdf",height=5, width=7)
par(mar=c(7,4,4,4))
plot(GenomeWide_QTLassigned$Cumul_Pos/1000000, GenomeWide_QTLassigned$pval, cex=0.6, ylab="-log(p-value)",xlab="Physical Position (Mbp)",xaxt="n")
abline(h=THR, col="red")
UNIQ_QTL<-unique(GenomeWide_QTLassigned[which(!is.na(GenomeWide_QTLassigned[,2])),2])
palette(rainbow(length(UNIQ_QTL)))
COLORS<-rep(c("blue","red"), 12)
for (p in 1:length(UNIQ_QTL)){
QTLpoints<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned[,2] == UNIQ_QTL[p]),]
points(QTLpoints$Cumul_Pos/1000000, QTLpoints$pval, cex=0.6, col=COLORS[p])
}
abline(v=c(558535432,1326610456,2026321570,2673381728,3343411888,3926792401)/1000000, col="gray", lty=2)
dev.off()
pdf("/Users/agonzale/Documents/SmithLab/NAM/write/Bridgs_edited_files_v2/ExtraFigs/GWAS_Genes.pdf",height=5, width=9)
par(mar=c(4,4,4,4))
plot(GenomeWide_QTLassigned$Cumul_Pos/1000000, GenomeWide_QTLassigned$pval, cex=0.6, ylab="-log(p-value)",xlab="Physical Position (Mbp)",xaxt="n")
abline(h=THR, col="red")
UNIQ_QTL<-unique(GenomeWide_QTLassigned[which(!is.na(GenomeWide_QTLassigned[,2])),2])
palette(rainbow(length(UNIQ_QTL)))
COLORS<-rep(c("blue","red"), 12)
for (p in 1:length(UNIQ_QTL)){
QTLpoints<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned[,2] == UNIQ_QTL[p]),]
points(QTLpoints$Cumul_Pos/1000000, QTLpoints$pval, cex=0.6, col=COLORS[p])
}
abline(v=c(558535432,1326610456,2026321570,2673381728,3343411888,3926792401)/1000000, col="gray", lty=2)
dev.off()
pdf("/Users/agonzale/Documents/SmithLab/NAM/write/Bridgs_edited_files_v2/ExtraFigs/GWAS_Genes.pdf",height=5, width=9)
par(mar=c(5,4,4,4))
plot(GenomeWide_QTLassigned$Cumul_Pos/1000000, GenomeWide_QTLassigned$pval, cex=0.6, ylab="-log(p-value)",xlab="Physical Position (Mbp)",xaxt="n")
abline(h=THR, col="red")
# Color each QTL identified with a different color
UNIQ_QTL<-unique(GenomeWide_QTLassigned[which(!is.na(GenomeWide_QTLassigned[,2])),2])
# create nQTL colors
palette(rainbow(length(UNIQ_QTL)))
#COLORS<-(palette(gray(seq(0,.9,len = 25))))
COLORS<-rep(c("blue","red"), 12)
# paint each QTL with a different color
for (p in 1:length(UNIQ_QTL)){
QTLpoints<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned[,2] == UNIQ_QTL[p]),]
points(QTLpoints$Cumul_Pos/1000000, QTLpoints$pval, cex=0.6, col=COLORS[p])
}
# Set chromosome boundaries
abline(v=c(558535432,1326610456,2026321570,2673381728,3343411888,3926792401)/1000000, col="gray", lty=2)
dev.off()
pdf("/Users/agonzale/Documents/SmithLab/NAM/write/Bridgs_edited_files_v2/ExtraFigs/GWAS_Genes.pdf",height=5, width=9)
par(mar=c(5,4,4,4))
#plot(GenomeWide_QTLassigned$Cumul_Pos/1000000, GenomeWide_QTLassigned$pval, cex=0.6, ylab="-log(p-value)",xlab="Physical Position (Mbp)",xaxt="n")
plot(GenomeWide_QTLassigned$Cumul_Pos/1000000, GenomeWide_QTLassigned$pval, cex=0.6, ylab="-log(p-value)",xlab="Physical Position (Mbp)")
abline(h=THR, col="red")
# Color each QTL identified with a different color
UNIQ_QTL<-unique(GenomeWide_QTLassigned[which(!is.na(GenomeWide_QTLassigned[,2])),2])
# create nQTL colors
palette(rainbow(length(UNIQ_QTL)))
#COLORS<-(palette(gray(seq(0,.9,len = 25))))
COLORS<-rep(c("blue","red"), 12)
# paint each QTL with a different color
for (p in 1:length(UNIQ_QTL)){
QTLpoints<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned[,2] == UNIQ_QTL[p]),]
points(QTLpoints$Cumul_Pos/1000000, QTLpoints$pval, cex=0.6, col=COLORS[p])
}
# Set chromosome boundaries
abline(v=c(558535432,1326610456,2026321570,2673381728,3343411888,3926792401)/1000000, col="gray", lty=2)
dev.off()
legend("topright",col=c("black","gray"),pch=c(NA,1),lty=c(2,NA))
legend("topright",col=c("black","gray"),pch=c(NA,1),lty=c(2,NA),legend=c("SNP","Chromosome boundary"))
legend("topright",col=c("black","gray"),pch=c(NA,1),lty=c(NA,2),legend=c("SNP","Chromosome boundary"))
legend("topright",col=c("gray","black"),pch=c(NA,1),lty=c(2,NA),legend=c("SNP","Chromosome boundary"))
abline(v=c(558535432,1326610456,2026321570,2673381728,3343411888,3926792401)/1000000, col="gray", lty=2)
legend("topright",col=c("gray","black"),pch=c(NA,1),lty=c(2,NA),legend=c("Chromosome boundary","SNP"))
pdf("/Users/agonzale/Documents/SmithLab/NAM/write/Bridgs_edited_files_v2/ExtraFigs/GWAS_Genes.pdf",height=5, width=9)
par(mar=c(5,4,4,4))
#plot(GenomeWide_QTLassigned$Cumul_Pos/1000000, GenomeWide_QTLassigned$pval, cex=0.6, ylab="-log(p-value)",xlab="Physical Position (Mbp)",xaxt="n")
plot(GenomeWide_QTLassigned$Cumul_Pos/1000000, GenomeWide_QTLassigned$pval, cex=0.6, ylab="-log(p-value)",xlab="Physical Position (Mbp)")
abline(h=THR, col="red")
# Color each QTL identified with a different color
UNIQ_QTL<-unique(GenomeWide_QTLassigned[which(!is.na(GenomeWide_QTLassigned[,2])),2])
# create nQTL colors
palette(rainbow(length(UNIQ_QTL)))
#COLORS<-(palette(gray(seq(0,.9,len = 25))))
COLORS<-rep(c("blue","red"), 12)
# paint each QTL with a different color
for (p in 1:length(UNIQ_QTL)){
QTLpoints<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned[,2] == UNIQ_QTL[p]),]
points(QTLpoints$Cumul_Pos/1000000, QTLpoints$pval, cex=0.6, col=COLORS[p])
}
# Set chromosome boundaries
abline(v=c(558535432,1326610456,2026321570,2673381728,3343411888,3926792401)/1000000, col="gray", lty=2)
legend("topright",col=c("gray","black"),pch=c(NA,1),lty=c(2,NA),legend=c("Chromosome boundary","SNP"))
dev.off()
pdf("/Users/agonzale/Documents/SmithLab/NAM/write/Bridgs_edited_files_v2/ExtraFigs/GWAS_Genes.pdf",height=7, width=11)
par(mar=c(5,4,4,4))
#plot(GenomeWide_QTLassigned$Cumul_Pos/1000000, GenomeWide_QTLassigned$pval, cex=0.6, ylab="-log(p-value)",xlab="Physical Position (Mbp)",xaxt="n")
plot(GenomeWide_QTLassigned$Cumul_Pos/1000000, GenomeWide_QTLassigned$pval, cex=0.6, ylab="-log(p-value)",xlab="Physical Position (Mbp)")
abline(h=THR, col="red")
# Color each QTL identified with a different color
UNIQ_QTL<-unique(GenomeWide_QTLassigned[which(!is.na(GenomeWide_QTLassigned[,2])),2])
# create nQTL colors
palette(rainbow(length(UNIQ_QTL)))
#COLORS<-(palette(gray(seq(0,.9,len = 25))))
COLORS<-rep(c("blue","red"), 12)
# paint each QTL with a different color
for (p in 1:length(UNIQ_QTL)){
QTLpoints<-GenomeWide_QTLassigned[which(GenomeWide_QTLassigned[,2] == UNIQ_QTL[p]),]
points(QTLpoints$Cumul_Pos/1000000, QTLpoints$pval, cex=0.6, col=COLORS[p])
}
# Set chromosome boundaries
abline(v=c(558535432,1326610456,2026321570,2673381728,3343411888,3926792401)/1000000, col="gray", lty=2)
legend("topright",col=c("gray","black"),pch=c(NA,1),lty=c(2,NA),legend=c("Chromosome boundary","SNP"))
dev.off()
axis(side=1, at=c(qtlselect/1000000), labels = FALSE)
text(x=c(qtlselect/1000000),  par("usr")[3],
+      labels = Table_SNPnearest[,5], srt = 90, xpd = T, cex=0.5)
axis(side=1, at=c(qtlselect/1000000), labels = FALSE)
text(x=c(qtlselect/1000000),  par("usr")[3],     labels = Table_SNPnearest[,5], srt = 90, xpd = T, cex=0.5)
+      labels = Table_SNPnearest[,5], srt = 90, xpd = T, cex=0.5)
Annotations
head(Annotations)
Annotations$Abrevation
which(Annotations$Abrevation == "FT2")
which(Annotations$Abrevation == "eps2/HvCEN")
Annotations[c(18,26),]
Genotypes_ALL<-read.table("~/agonzale/Documents/SmithLab/NAM/Data/Alex/download_BAQY/snpfile.txt")
Genotypes_ALL<-read.table("/Users/agonzale/Documents/SmithLab/NAM/Data/Alex/download_BAQY/snpfile.txt")
Genotypes_ALL<-read.table("/Users/agonzale/Documents/SmithLab/NAM/Data/Alex/download_BAQY/snpfile.txt",header=T,row.names=1)
Genotypes_ALL<-read.csv("/Users/agonzale/Documents/SmithLab/NAM/Data/Alex/download_BAQY/snpfile.txt",header=T,row.names=1)
dim(Genotypes_ALL)
Genotypes_ALL[1:2,1:2]
Genotypes_ALL[1:2,]
Genotypes_ALL<-read.csv("/Users/agonzale/Documents/SmithLab/NAM/Data/Alex/download_BAQY/snpfile.txt",header=T,row.names=1,sep="\t")
Genotypes_ALL<-read.table("/Users/agonzale/Documents/SmithLab/NAM/Data/Alex/download_BAQY/snpfile.txt",header=T,row.names=1)
DPlist<-read.table("/Users/agonzale/Documents/SmithLab/NAM/Data/Alex/download_BAQY/Line_Details.xls",header=T)
DPlist<-read.csv("/Users/agonzale/Documents/SmithLab/NAM/Data/Alex/download_BAQY/Line_Details.xls",header=T,sep=",")
head(DPlist)
DPlist<-read.csv("/Users/agonzale/Documents/SmithLab/NAM/Data/Alex/download_BAQY/Line_Details.xls",header=T,sep=",")
DPlist<-read.table("/Users/agonzale/Documents/SmithLab/NAM/Data/Alex/download_BAQY/DPnames.txt")
genotype_ALL<-Genotypes_ALL
genotype_ALL[1:10,1:10]
MISSING<-function(dat){
miss<-length(which(is.na(dat)))/length(dat)
return(miss)
}
genotype_ALL<-as.data.frame(t(Genotypes_ALL))
MISSING<-function(dat){
miss<-length(which(is.na(dat)))/length(dat)
return(miss)
}
missing_snp<-apply(genotype_ALL, 1, MISSING)
if (length(which(missing_snp >0.5))>0){
genotype<-genotype_ALL[-c(which(missing_snp >0.5)),]
}else{genotype<-genotype_ALL}
length(which(missing_snp >0.5))
dim()
dim(genotype)
write.table(genotype,"/home/smithkp/agonzale/Projects/NAM/Analysis/smartPCA/NSCG_Diverse/NSGC_Diverse_genotypesBOPA.txt",quote=F,row.names=T,col.names=T,sep="\t")
write.table(genotype,"~/Desktop/for_PCA/NSGC_Diverse_genotypesBOPA.txt",quote=F,row.names=T,col.names=T,sep="\t")
write.table(genotype,"~/Desktop/forPCA/NSGC_Diverse_genotypesBOPA.txt",quote=F,row.names=T,col.names=T,sep="\t")
DATA<-read.table("~/Desktop/forPCA/NSGC_Diverse_genotypesBOPA.txt", header=T, row.names=1)
MISSING_ALLOWED<-0.1
DATA_missing_snp<-apply(DATA, 1, MISSING)
if (length(which(DATA_missing_snp > MISSING_ALLOWED))>0){
All_parentsNSGC <-DATA[-c(which(DATA_missing_snp > MISSING_ALLOWED)),]
}else{All_parentsNSGC<-DATA}
length(which(DATA_missing_snp > MISSING_ALLOWED))
#Remove monomorphic markers
mono<-function(dat){
AlleleA<-length(which(dat == 'AA'))
AlleleB<-length(which(dat == 'BB'))
if(AlleleA == 0 | AlleleB == 0){monomorphic<-'yes'}else{monomorphic<-'no'}
return(monomorphic)
}
MONO<-apply(All_parentsNSGC,1, mono)
monoSites<-which(MONO == "yes")
length(monoSites)
if(length(monoSites) >0){
All_parentsNSGC_poly<-All_parentsNSGC[-c(monoSites),]
}else{All_parentsNSGC_poly<-All_parentsNSGC}
dim(All_parentsNSGC_poly)
minorAllele<-function(dat){
AlleleA<-length(which(dat == 'AA'))
AlleleB<-length(which(dat == 'BB'))
minor_allele<-if(AlleleA <=AlleleB) {'A'} else {'B'}
return(minor_allele)
}
MinorAllele_ref<-apply(All_parentsNSGC_poly,1, minorAllele)
MinorAllele_ref<-as.data.frame(MinorAllele_ref)
#Make a list of Major allele
MajorAllele<-function(dat){
major_allele <-if (dat == 'A') {'B'} else {'A'}
return (major_allele)
}
Major_Allele_ref<-apply(MinorAllele_ref,1, MajorAllele)
# Set SNP information, then MAF, then genotypes
GENOTYPE_READY<-cbind(as.data.frame(MinorAllele_ref),as.data.frame(All_parentsNSGC_poly))
MORGANS<-rep(NA, (dim(GENOTYPE_READY)[1]))
# Get SNP information Chromosome and position, since we don't know the true position or all the SNPs, set them to 1
CHROMSOME_INFO<-rep("1", dim(GENOTYPE_READY)[1])
SNP_file<-cbind(row.names(GENOTYPE_READY),as.data.frame(CHROMSOME_INFO), as.data.frame(MORGANS),rep(NA,dim(GENOTYPE_READY)[1]), as.data.frame(GENOTYPE_READY[,1]), as.data.frame(Major_Allele_ref))
colnames(SNP_file)<-c("SNP_name","Chromosome","cM","Position","Reference_mino","Reference_major")
write.table(SNP_file,"~/Desktop/forPCA/NSGC_DP.snp",quote=F,row.names=F,col.names=F,sep="\t")
Genotypes_names<-colnames(GENOTYPE_READY)[-1]
Samples_ind<-cbind(as.data.frame(Genotypes_names), as.data.frame(rep('U',length(Genotypes_names))), as.data.frame(rep(1,length(Genotypes_names))))
colnames(Samples_ind)<-c("SampleID","Gender","pop_group")
write.table(Samples_ind,"~/Desktop/forPCA/NSGC_DP.ind",quote=F,row.names=F,col.names=F,sep="\t")
COUNT_ALLELE<-function(dat){
#remove maf
GENOTYPES<-dat[-c(1)]
MAF<-dat[1]
AA<-which(GENOTYPES == 'AA')
BB<-which(GENOTYPES == 'BB')
AB<-which(GENOTYPES == 'AB')
Missing<- which(is.na(GENOTYPES) == 'TRUE')
if(MAF == 'A'){
GENOTYPES[AA]<-'2'
GENOTYPES[BB]<-'0'
}
if(MAF == 'B'){
GENOTYPES[AA]<-'0'
GENOTYPES[BB]<-'2'
}
#All AB are 1
GENOTYPES[AB]<-1
#All missing values are = 9
GENOTYPES[Missing]<-'9'
return(GENOTYPES)
}
RESULT<-as.data.frame(apply(GENOTYPE_READY,1, COUNT_ALLELE))
Genotype_counts<-as.data.frame(t(RESULT))
write.table(Genotype_counts,"~/agonzale/Desktop/forPCA/NSGC_DP.eigenstratgeno",quote=F,row.names=F,col.names=F,sep="")
write.table(Genotype_counts,"/Users/agonzale/Desktop/forPCA/NSGC_DP.eigenstratgeno",quote=F,row.names=F,col.names=F,sep="")
print(paste("SNPs total:",dim(Genotype_counts)[1]))
rm(list=ls())
EVE<-read.table("/Users/agonzale/Documents/SmithLab/NAM/Analysis/smartPCA/NSGC_diverseParents/output/NSGC_DP.eval")
pc1<-round((EVE[1,]/sum(EVE)*100),2) #for PC1
pc2<-round((EVE[2,]/sum(EVE)*100),2)#for PC2
pc3<-round((EVE[3,]/sum(EVE)*100),2) #for PC3
pc4<-round((EVE[4,]/sum(EVE)*100),2) #for PC4
pc5<-round((EVE[5,]/sum(EVE)*100),2) #for PC5
TOTAL<-sum(EVE)
EXPLAIN<-(EVE[,1]/TOTAL)*100
plot(EXPLAIN)
DATA<-read.table("/Users/agonzale/Documents/SmithLab/NAM/Analysis/smartPCA/NSGC_diverseParents/output/NSGC_DP.pca.evec",header=F,row.names=1)
dim(DATA)
plot(DATA[,1],DATA[,2],ylab=paste("PC2 (",pc2,"%)",sep=""),xlab=paste("PC1 (",pc1,"%)",sep=""))
